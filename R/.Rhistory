averageoverlap <- function(x, y, k) {
Ad <- sapply(1:k, function(i) length(intersect(x[1:i], y[1:i])))/seq(1,k)
AO <- cumsum(Ad)/seq(1,k)
return(AO[k])
}
x <- c(5,7,9,3,2,6)
y <- c(1,5,10,6,8,4,7)
averageoverlap(x,y,3)
# Average Overlap
averageoverlap <- function(x, y, k) {
Ad <- sapply(1:k, function(i) length(intersect(x[1:i], y[1:i])))/seq(1,k)
AO <- cumsum(Ad)/seq(1,k)
return(AO)
}
averageoverlap(x,y,3)
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
binaryIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Binary" & nmadb$Format!="iv",]$Record.ID
continuousIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Record.ID
continuous_rm = lapply(continuousIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(continuous_rm) <- as.character(continuousIDs)
head(continuous_rm)
# calculate ranking metrics for binary outcome networks
binary_rm = lapply(binaryIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
head(binary_rm)
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
# create lists with only ranks for kendall correlation
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
# calculate spearman correlation
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
# save all pBV vs SUCRA in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"SUCRA_ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"SUCRA_ranks"], decreasing=F)))
names(pBVvsSUCRA_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
res_pBVvsSUCRA_s <- paste0(summary(pBVvsSUCRA_s, digits = 3)["Median"], " (", summary(pBVvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_k <-paste0(summary(pBVvsSUCRA_k, digits = 3)["Median"], " (", summary(pBVvsSUCRA_k, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_AP <-paste0(summary(pBVvsSUCRA_AP, digits = 3)["Median"], " (", summary(pBVvsSUCRA_AP, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AP, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_AO <-paste0(summary(pBVvsSUCRA_AO, digits = 3)["Median"], " (", summary(pBVvsSUCRA_AO, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AO, digits = 3)["3rd Qu."], ")")
# save all pBV vs Avg TE in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(pBVvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_AP)
head(pBVvsAvgTE_AO)
res_pBVvsAvgTE_s <- paste0(summary(pBVvsAvgTE_s, digits = 3)["Median"], " (", summary(pBVvsAvgTE_s, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_s, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_k <-paste0(summary(pBVvsAvgTE_k, digits = 3)["Median"], " (", summary(pBVvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_AP <-paste0(summary(pBVvsAvgTE_AP, digits = 3)["Median"], " (", summary(pBVvsAvgTE_AP, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_AP, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_AO <-paste0(summary(pBVvsAvgTE_AO, digits = 3)["Median"], " (", summary(pBVvsAvgTE_AO, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_AO, digits = 3)["3rd Qu."], ")")
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(SUCRAvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
head(SUCRAvsAvgTE_AP)
head(SUCRAvsAvgTE_AO)
res_SUCRAvsAvgTE_s <- paste0(summary(SUCRAvsAvgTE_s, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_s, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_k <- paste0(summary(SUCRAvsAvgTE_k, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_AP <- paste0(summary(SUCRAvsAvgTE_AP, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_AP, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AP, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_s <- paste0(summary(SUCRAvsAvgTE_s, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_s, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_k <- paste0(summary(SUCRAvsAvgTE_k, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_AP <- paste0(summary(SUCRAvsAvgTE_AP, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_AP, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AP, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_AO <-paste0(summary(SUCRAvsAvgTE_AO, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_AO, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AO, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs SUCRA jags in a vector separately for kendall and spearman, then store median and interquartile range
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)))
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
sum(SUCRAvsSUCRAjags_AO>0.9, na.rm = T)/sum(!is.na(SUCRAvsSUCRAjags_AO))
