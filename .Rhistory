knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/24.5.MyrtoIncludedAllOutcomesClean.xlsx", na = "NA")
#describe the data
tapply(DATA$N_arm_total_stapf,DATA$Drug_name,sum,na.rm=T)
print(length(table(DATA$Drug_name)))
print(length(table(DATA$Final_ID_all)))
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DATApairs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T)
View(DATApairs)
DPs <- subset(DATApairs, treat1!="BBT I" & treat1!="tart cherry juice" & treat1!="sleep hygiene" & treat1!="midazolam")
DPs <- subset(DATApairs, treat2!="waitlist" & treat2!="artificial juice" & treat2!="sleep hygiene" & treat2!="oxazepam")
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#remove rows for studies disconnected from main network
DPs <- subset(DATApairs, treat2!="waitlist" & treat2!="artificial juice" & treat2!="sleep hygiene" & treat2!="oxazepam")
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T)
library(nmadata)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
nmadb = getNMADB()
# get IDs of networks separately for binary and continuous outcome; those with inverse-variance excluded
binaryIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Binary" & nmadb$Format!="iv",]$Record.ID
continuousIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Record.ID
# calculate ranking metrics for continuous outcome networks
continuous_rm = lapply(continuousIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(continuous_rm) <- as.character(continuousIDs)
# calculate ranking metrics for binary outcome networks
binary_rm = lapply(binaryIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n), "ranking metrics"= cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
#create lists with only ranks for kendall correlation
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
#create lists with only ranking metrics values for spearman correlation
#con_values <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
#bin_values <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
#calculate kendall correlation and spearman correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
# save all pBV vs SUCRA in a vector separately for kendall and spearman, then store median and interquartile range
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
res_pBVvsSUCRA_s <- paste0(summary(pBVvsSUCRA_s, digits = 3)["Median"], " (", summary(pBVvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_k <-paste0(summary(pBVvsSUCRA_k, digits = 3)["Median"], " (", summary(pBVvsSUCRA_k, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 3)["3rd Qu."], ")")
# save all pBV vs Avg TE in a vector separately for kendall and spearman, then store median and interquartile range
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
res_pBVvsAvgTE_s <- paste0(summary(pBVvsAvgTE_s)["Median"], " (", summary(pBVvsAvgTE_s)["1st Qu."], ", ", summary(pBVvsAvgTE_s)["3rd Qu."], ")")
res_pBVvsAvgTE_k <-paste0(summary(pBVvsAvgTE_k, digits = 3)["Median"], " (", summary(pBVvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs Avg TE in a vector separately for kendall and spearman, then store median and interquartile range
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
res_SUCRAvsAvgTE_s <- paste0(summary(SUCRAvsAvgTE_s)["Median"], " (", summary(SUCRAvsAvgTE_s)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s)["3rd Qu."], ")")
res_SUCRAvsAvgTE_k <- paste0(summary(SUCRAvsAvgTE_k, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs SUCRA jags in a vector separately for kendall and spearman, then store median and interquartile range
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
sum(SUCRAvsSUCRAjags_s<0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation <0.9
sum(SUCRAvsSUCRAjags_k<0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation <0.9
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
###**** please add avery now and then a snapshot of the data you create using head(data)
###**** please add some of the graphs we wanted
rm(list=ls())
library(devtools)
library(nmadb)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(nmadata)
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
nmadb = getNMADB()
# get IDs of networks separately for binary and continuous outcome; those with inverse-variance excluded
binaryIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Binary" & nmadb$Format!="iv",]$Record.ID
continuousIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Record.ID
# calculate ranking metrics for continuous outcome networks
continuous_rm = lapply(continuousIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(continuous_rm) <- as.character(continuousIDs)
# calculate ranking metrics for binary outcome networks
binary_rm = lapply(binaryIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n), "ranking metrics"= cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
View(binary_rm)
continuous_rm$`479622`$`no. studies`
continuous_rm$`479622`$`no. studies`^2
# calculate ranking metrics for continuous outcome networks
continuous_rm = lapply(continuousIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE precision"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(continuous_rm) <- as.character(continuousIDs)
# calculate ranking metrics for binary outcome networks
binary_rm = lapply(binaryIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n), "ranking metrics"= cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage), "Avg precision"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
head(continuous_rm)
head(binary_rm)
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(con_ranks)
head(bin_ranks)
head(kendall_con)
head(kendall_bin)
head(spearman_con)
head(spearman_bin)
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
res_pBVvsSUCRA_s <- paste0(summary(pBVvsSUCRA_s, digits = 3)["Median"], " (", summary(pBVvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_k <-paste0(summary(pBVvsSUCRA_k, digits = 3)["Median"], " (", summary(pBVvsSUCRA_k, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 3)["3rd Qu."], ")")
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_s)
head(pBVvsAvgTE_k)
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_s)
head(SUCRAvsAvgTE_s)
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
res_pBVvsAvgTE_s <- paste0(summary(pBVvsAvgTE_s)["Median"], " (", summary(pBVvsAvgTE_s)["1st Qu."], ", ", summary(pBVvsAvgTE_s)["3rd Qu."], ")")
res_pBVvsAvgTE_k <-paste0(summary(pBVvsAvgTE_k, digits = 3)["Median"], " (", summary(pBVvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_s <- paste0(summary(SUCRAvsAvgTE_s)["Median"], " (", summary(SUCRAvsAvgTE_s)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s)["3rd Qu."], ")")
res_SUCRAvsAvgTE_k <- paste0(summary(SUCRAvsAvgTE_k, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 3)["3rd Qu."], ")")
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
sum(SUCRAvsSUCRAjags_s<0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation <0.9
sum(SUCRAvsSUCRAjags_k<0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation <0.9
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
head(samplesizes)
head(samp_nt)
# store 'normalized' precision for Avg TE in each network in a vector
AvgTEprec <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"]))
names(AvgTEprec) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec)
plot(samp_nt, pBVvsAvgTE_k)
plot(samp_nt, pBVvsAvgTE_s)
plot(samp_nt, SUCRAvsAvgTE_k)
plot(samp_nt, SUCRAvsAvgTE_s)
plot(samp_nt, pBVvsSUCRA_k)
plot(samp_nt, pBVvsSUCRA_s)
plot(samp_nt, SUCRAvsAvgTE_k)
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
sum(SUCRAvsSUCRAjags_s<0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation <0.9
sum(SUCRAvsSUCRAjags_k<0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation <0.9
plot(AvgTEprec, SUCRAvsAvgTE_k)
x <- as.numeric(AvgTEprec)
AvgTEprec <- c(vapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"]), vapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"]))
AvgTEprec <- c(lapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"]), lapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"]))
plot(AvgTEprec, SUCRAvsAvgTE_k)
AvgTEprec <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"]))
plot(AvgTEprec, SUCRAvsAvgTE_k)
AvgTEprec <- c(as.numeric(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"])), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"]))
AvgTEprec <- c(as.numeric(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"])), as.numeric(sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"])))
AvgTEprec <- c(as.numeric(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"])), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"]))
View(AvgTEprec)
AvgTEprec <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"])), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"]))
AvgTEprec <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"]))
sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"])
binary_rm = lapply(binaryIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE precision"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
head(binary_rm)
#create lists with only ranks for kendall correlation
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
#create lists with only ranking metrics values for spearman correlation
#con_values <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
#bin_values <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
#calculate kendall correlation and spearman correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
# save all pBV vs SUCRA in a vector separately for kendall and spearman, then store median and interquartile range
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
res_pBVvsSUCRA_s <- paste0(summary(pBVvsSUCRA_s, digits = 3)["Median"], " (", summary(pBVvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_k <-paste0(summary(pBVvsSUCRA_k, digits = 3)["Median"], " (", summary(pBVvsSUCRA_k, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 3)["3rd Qu."], ")")
# save all pBV vs Avg TE in a vector separately for kendall and spearman, then store median and interquartile range
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
res_pBVvsAvgTE_s <- paste0(summary(pBVvsAvgTE_s)["Median"], " (", summary(pBVvsAvgTE_s)["1st Qu."], ", ", summary(pBVvsAvgTE_s)["3rd Qu."], ")")
res_pBVvsAvgTE_k <-paste0(summary(pBVvsAvgTE_k, digits = 3)["Median"], " (", summary(pBVvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs Avg TE in a vector separately for kendall and spearman, then store median and interquartile range
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
res_SUCRAvsAvgTE_s <- paste0(summary(SUCRAvsAvgTE_s)["Median"], " (", summary(SUCRAvsAvgTE_s)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s)["3rd Qu."], ")")
res_SUCRAvsAvgTE_k <- paste0(summary(SUCRAvsAvgTE_k, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs SUCRA jags in a vector separately for kendall and spearman, then store median and interquartile range
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
sum(SUCRAvsSUCRAjags_s<0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation <0.9
sum(SUCRAvsSUCRAjags_k<0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation <0.9
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
AvgTEprec <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE precision"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE precision"]))
names(AvgTEprec) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec)
plot(AvgTEprec, SUCRAvsAvgTE_k)
plot(SUCRAvsAvgTE_k, AvgTEprec)
plot(AvgTEprec, SUCRAvsAvgTE_k)
plot(SUCRAvsAvgTE_k, AvgTEprec)
plot(AvgTEprec, SUCRAvsAvgTE_k)
plot(samp_nt, pBVvsSUCRA_s)
plot(samp_nt, SUCRAvsSUCRAjags_k)
plot(samp_nt, SUCRAvsSUCRAjags_s)
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source(plots)
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source("plots")
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source("plots.R")
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source("plots.R")
p1_k <- plot(samp_nt, pBVvsSUCRA_k)         # kendall correlation
p1_s <- plot(samp_nt, pBVvsSUCRA_s)         # spearman correlation
p2_k <- plot(samp_nt, SUCRAvsSUCRAjags_k)   # kendall correlation
p2_s <- plot(samp_nt, SUCRAvsSUCRAjags_s)   # spearman correlation
# plots of normalised precision and correlations involving Avg TE
p3_k <- plot(AvgTEprec, SUCRAvsAvgTE_k)   # kendall correlation
p3_s <- plot(AvgTEprec, SUCRAvsAvgTE_s)   # spearman correlation
p4_k <- plot(AvgTEprec, pBVvsAvgTE_k)     # kendall correlation
p4_s <- plot(AvgTEprec, pBVvsAvgTE_s)     # spearman correlation
p1_k
p1_s
par(mfrow=c(2,4))
plot(samp_nt, pBVvsSUCRA_k)         # kendall correlation
plot(samp_nt, pBVvsSUCRA_s)         # spearman correlation
plot(samp_nt, SUCRAvsSUCRAjags_k)   # kendall correlation
plot(samp_nt, SUCRAvsSUCRAjags_s)   # spearman correlation
plot(AvgTEprec, SUCRAvsAvgTE_k)   # kendall correlation
plot(AvgTEprec, SUCRAvsAvgTE_s)   # spearman correlation
plot(AvgTEprec, pBVvsAvgTE_k)     # kendall correlation
plot(AvgTEprec, pBVvsAvgTE_s)     # spearman correlation
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source("plots.R")
