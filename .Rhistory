SUCRAvsAvgTE_s[SUCRAvsAvgTE_s<.95]
sum(SUCRAvsAvgTE_s[SUCRAvsAvgTE_s>.9])/length(SUCRAvsAvgTE_s)
# prepare matrix to store results
results <- matrix(nrow = 4, ncol = 4,
dimnames = list(c("Spearman rho", "Kendall tau", "Yilmaz tauAP", "Average Overlap"),
c("pBV vs SUCRA", "SUCRA vs ATE", "pBV vs ATE", "SUCRA vs SUCRAjags")))
# save all pBV vs SUCRA in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) round(spearman_con[[i]]["pBV ranks","SUCRA_ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(spearman_bin[[i]]["pBV ranks","SUCRA_ranks"], digits = 3)))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) round(kendall_con[[i]]["pBV ranks","SUCRA_ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(kendall_bin[[i]]["pBV ranks","SUCRA_ranks"], digits = 3)))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AP <- c(sapply(1:length(con_ranks), function(i) round(tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"SUCRA_ranks"], decreasing=F), digits = 3)),
sapply(1:length(bin_ranks), function(i) round(tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"SUCRA_ranks"], decreasing=F), digits = 3)))
names(pBVvsSUCRA_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(con_ranks[[i]][,"pBV ranks"]),order(con_ranks[[i]][,"SUCRA_ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(bin_ranks[[i]][,"pBV ranks"]),order(bin_ranks[[i]][,"SUCRA_ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- Filter(Negate(anyNA), pBVvsSUCRA_AO)   ## exclude any NAs
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
results["Spearman rho","pBV vs SUCRA"] <- paste0(summary(pBVvsSUCRA_s, digits = 2)["Median"], " (", summary(pBVvsSUCRA_s, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_k, digits = 2)["Median"], " (", summary(pBVvsSUCRA_k, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_AP, digits = 2)["Median"], " (", summary(pBVvsSUCRA_AP, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_AO, digits = 2)["Median"], " (", summary(pBVvsSUCRA_AO, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_AO, digits = 2)["3rd Qu."], ")")
# save all SUCRA vs Avg TE in a vector separately for kendall, spearman and AP, then store median and interquartile range
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) round(spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"], digits = 3)))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) round(kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"], digits = 3)))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) round(tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F), digits = 3)),
sapply(1:length(bin_ranks), function(i) round(tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F), digits = 3)))
names(SUCRAvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(con_ranks[[i]][,"SUCRA_ranks"]),order(con_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(bin_ranks[[i]][,"SUCRA_ranks"]),order(bin_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}))
names(SUCRAvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- Filter(Negate(anyNA), SUCRAvsAvgTE_AO)   ## exclude any NAs
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
head(SUCRAvsAvgTE_AP)
head(SUCRAvsAvgTE_AO)
results["Spearman rho","SUCRA vs ATE"] <- paste0(summary(SUCRAvsAvgTE_s, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_s, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","SUCRA vs ATE"]  <- paste0(summary(SUCRAvsAvgTE_k, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs ATE"] <- paste0(summary(SUCRAvsAvgTE_AP, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_AP, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","SUCRA vs ATE"] <-paste0(summary(SUCRAvsAvgTE_AO, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_AO, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AO, digits = 2)["3rd Qu."], ")")
# save all pBV vs Avg TE in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) round(spearman_con[[i]]["pBV ranks","Avg TE ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(spearman_bin[[i]]["pBV ranks","Avg TE ranks"], digits = 3)))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) round(kendall_con[[i]]["pBV ranks","Avg TE ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(kendall_bin[[i]]["pBV ranks","Avg TE ranks"], digits = 3)))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) round(tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F), digits = 3)),
sapply(1:length(bin_ranks), function(i) round(tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F), digits = 3)))
names(pBVvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(con_ranks[[i]][,"pBV ranks"]),order(con_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(bin_ranks[[i]][,"pBV ranks"]),order(bin_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}))
names(pBVvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- Filter(Negate(anyNA), pBVvsAvgTE_AO)   ## exclude any NAs
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_AP)
head(pBVvsAvgTE_AO)
results["Spearman rho","pBV vs ATE"] <- paste0(summary(pBVvsAvgTE_s, digits = 2)["Median"], " (", summary(pBVvsAvgTE_s, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","pBV vs ATE"]  <-paste0(summary(pBVvsAvgTE_k, digits = 2)["Median"], " (", summary(pBVvsAvgTE_k, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","pBV vs ATE"]  <-paste0(summary(pBVvsAvgTE_AP, digits = 2)["Median"], " (", summary(pBVvsAvgTE_AP, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","pBV vs ATE"] <-paste0(summary(pBVvsAvgTE_AO, digits = 2)["Median"], " (", summary(pBVvsAvgTE_AO, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_AO, digits = 2)["3rd Qu."], ")")
# save all SUCRA vs SUCRA jags in a vector separately for kendall and spearman, then store proportion of network with values >0.9
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) round(spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"], digits = 3)))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) round(kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"], digits = 3)))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AP <- c(sapply(1:length(con_ranks), function(i) round(tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"SUCRAjags ranks"], decreasing=F), digits = 3)),
sapply(1:length(bin_ranks), function(i) round(tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"SUCRAjags ranks"], decreasing=F), digits = 3)))
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(con_ranks[[i]][,"SUCRA_ranks"]),order(con_ranks[[i]][,"SUCRAjags ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(bin_ranks[[i]][,"SUCRA_ranks"]),order(bin_ranks[[i]][,"SUCRAjags ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}))
names(SUCRAvsSUCRAjags_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- Filter(Negate(anyNA), SUCRAvsSUCRAjags_AO)   ## exclude any NAs
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
sum(SUCRAvsAvgTE_s[SUCRAvsAvgTE_s>.9])
SUCRAvsAvgTE_s[SUCRAvsAvgTE_s>.9]
sum(SUCRAvsAvgTE_s>.9)
sum(SUCRAvsAvgTE_s>.9)/length(SUCRAvsAvgTE_s)
sum(pBVvsSUCRA_s>.9)
sum(pBVvsSUCRA_s<.9)
sum(pBVvsSUCRA_s<.9)/length(pBVvsSUCRA_s)
sum(pBVvsSUCRA_s=.9)
pBVvsSUCRA_s==.9
sum(pBVvsSUCRA_s==.9)
sum(SUCRAvsAvgTE_s<.9)
sum(SUCRAvsAvgTE_s<.9)/length(SUCRAvsAvgTE_s)
sum(pBVvsSUCRA_s<.9)
sum(pBVvsSUCRA_s<.9)/length(pBVvsSUCRA_s)
sum(pBVvsSUCRA_s<.9)
sum(pBVvsAvgTE_s<.9)
sum(pBVvsAvgTE_s<.9)/length(pBVvsAvgTE_s)
sumSUCRAs <-  summary(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))], digits = 2)
sumSUCRAk <- summary(SUCRAvsSUCRAjags_k[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_k))], digits = 2)
sumSUCRAap <- summary(SUCRAvsSUCRAjags_AP[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AP))], digits = 2)
sumSUCRAao <- summary(SUCRAvsSUCRAjags_AO[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AO)))], digits = 2)
results["Spearman rho","SUCRA vs SUCRAjags"] <- paste0(sumSUCRAs["Median"], " (", sumSUCRAs["1st Qu."], ", ", sumSUCRAs["3rd Qu."], ")")
results["Kendall tau","SUCRA vs SUCRAjags"]  <- paste0(sumSUCRAk["Median"], " (", sumSUCRAk["1st Qu."], ", ", sumSUCRAk["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs SUCRAjags"] <- paste0(sumSUCRAap["Median"], " (", sumSUCRAap["1st Qu."], ", ", sumSUCRAap["3rd Qu."], ")")
results["Average Overlap","SUCRA vs SUCRAjags"] <-paste0(sumSUCRAao["Median"], " (", sumSUCRAao["1st Qu."], ", ", sumSUCRAao["3rd Qu."], ")")
View(results)
SUCRAs_90 <- sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
SUCRAk_90 <- sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
SUCRAap_90 <-  sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
SUCRAao_90 <- sum(SUCRAvsSUCRAjags_AO>0.9)/length(SUCRAvsSUCRAjags_AO)# % of networks with AO >0.9
SUCRAs_90 <- sum(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s))]>0.9)/length(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))]) # % of networks with spearman correlation >0.9
sum(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s))]>0.9)
SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))]>0.9
sumSUCRAs
SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))]
SUCRAvsSUCRAjags_s <- Filter(Negate(anyNA),SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))])
sum(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))])
sum(!is.na(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))]))
SUCRAvsSUCRAjags_k <- Filter(Negate(anyNA),SUCRAvsSUCRAjags_k[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_k))])
SUCRAvsSUCRAjags_AP <- Filter(Negate(anyNA),SUCRAvsSUCRAjags_k[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AP))])
SUCRAvsSUCRAjags_AP <- c(sapply(1:length(con_ranks), function(i) round(tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"SUCRAjags ranks"], decreasing=F), digits = 3)),
sapply(1:length(bin_ranks), function(i) round(tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"SUCRAjags ranks"], decreasing=F), digits = 3)))
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AP <- Filter(Negate(anyNA),SUCRAvsSUCRAjags_AP[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AP))])
SUCRAvsSUCRAjags_AO <- Filter(Negate(anyNA),SUCRAvsSUCRAjags_AO[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AO))])
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
sumSUCRAs <-  summary(SUCRAvsSUCRAjags_s, digits = 2)
sumSUCRAk <- summary(SUCRAvsSUCRAjags_k, digits = 2)
sumSUCRAap <- summary(SUCRAvsSUCRAjags_AP, digits = 2)
sumSUCRAao <- summary(SUCRAvsSUCRAjags_AO, digits = 2)
results["Spearman rho","SUCRA vs SUCRAjags"] <- paste0(sumSUCRAs["Median"], " (", sumSUCRAs["1st Qu."], ", ", sumSUCRAs["3rd Qu."], ")")
results["Kendall tau","SUCRA vs SUCRAjags"]  <- paste0(sumSUCRAk["Median"], " (", sumSUCRAk["1st Qu."], ", ", sumSUCRAk["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs SUCRAjags"] <- paste0(sumSUCRAap["Median"], " (", sumSUCRAap["1st Qu."], ", ", sumSUCRAap["3rd Qu."], ")")
results["Average Overlap","SUCRA vs SUCRAjags"] <-paste0(sumSUCRAao["Median"], " (", sumSUCRAao["1st Qu."], ", ", sumSUCRAao["3rd Qu."], ")")
View(results)
SUCRAs_90 <- sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
SUCRAk_90 <- sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
SUCRAap_90 <-  sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
SUCRAao_90 <- sum(SUCRAvsSUCRAjags_AO>0.9)/length(SUCRAvsSUCRAjags_AO)# % of networks with AO >0.9
sum(SUCRAvsSUCRAjags_AO>0.9)
sum(SUCRAvsSUCRAjags_AO<0.9)
SUCRAs_90 <- sum(SUCRAvsSUCRAjags_s<0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation <0.9
SUCRAk_90 <- sum(SUCRAvsSUCRAjags_k<0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation  <0.9
SUCRAap_90 <-  sum(SUCRAvsSUCRAjags_AP<0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation  <0.9
SUCRAao_90 <- sum(SUCRAvsSUCRAjags_AO<0.9)/length(SUCRAvsSUCRAjags_AO)# % of networks with AO  <0.9
sum(SUCRAvsSUCRAjags_AO<0.9)
sum(SUCRAvsSUCRAjags_s<0.9)
write.xlsx(results, "agreement results.xlsx")
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
# store relative range of precision for Avg TE in each network in a vector
AvgTEprec_range <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec range"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec range"]))
# store average precision for Avg TE in each network in a vector
AvgTEprec_avg <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec avg"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec avg"]))
names(AvgTEprec_range) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_range)
names(AvgTEprec_avg) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_avg)
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source("plots.R")
# For Table1 for publication
## NUMBER OF TREATMENTS IS INCORRECT IN DATABASE - MUST BE TAKEN FROM NETMETA RESULTS
finalDB <- nmadb[nmadb$Record.ID %in% binaryIDs | nmadb$Record.ID %in% continuousIDs,]
finalDB <- finalDB[,!grepl("Country..choice",colnames(finalDB))]
finalRM <- c(continuous_rm, binary_rm)
summary(as.numeric(sapply(1:length(finalRM), function(i) finalRM[[i]]["no. treatments"])))
summary(as.numeric(sapply(1:length(finalRM), function(i) finalRM[[i]]["no. studies"])))
summary(as.numeric(sapply(1:length(finalRM), function(i) finalRM[[i]]["sample size"])))
table(finalDB$Harmful.Beneficial.Outcome)
table(droplevels(finalDB$Type.of.Outcome.))
table(droplevels(finalDB$Year))
table(droplevels(finalDB$Journal.Name))
table(finalDB$Ranking.metric..choice.Probability.of.being.the.best.)
table(finalDB$Ranking.metric..choice.Rankograms.)
table(finalDB$Ranking.metric..choice.Median.rank.)
table(finalDB$Ranking.metric..choice.Mean.rank.)
table(finalDB$Ranking.metric..choice.SUCRA.)
table(finalDB$Ranking.metric..choice.P.score.)
table(finalDB$Ranking.metric..choice.Other.)
table(finalDB$Ranking.metric..choice.None.)
par(mfrow=c(2,4),
oma = c(1,1,0,0) + 0.1,
mar = c(1,4,1,1) + 0.1)
plot(log(samp_nt), pBVvsSUCRA_k,
ylab = "Kendall tau pBV vs SUCRA", ylim=c(0,1))      # kendall correlation
lines(smooth.spline(log(samp_nt), pBVvsSUCRA_k, df = 5),lwd=2,col="purple")
plot(log(samp_nt), pBVvsSUCRA_s,
ylab = "Spearman rho pBV vs SUCRA", ylim=c(0,1))    # spearman correlation
lines(smooth.spline(log(samp_nt), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsSUCRAjags_k,
ylab = "Kendall tau SUCRA vs Bayesian SUCRA", ylim=c(0,1))  # kendall correlation
lines(smooth.spline(log(samp_nt), SUCRAvsSUCRAjags_k, df = 5),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsSUCRAjags_s,
ylab = "Spearman rho SUCRA vs Bayesian SUCRA", ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(samp_nt), SUCRAvsSUCRAjags_s, df = 5),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsAvgTE_k,
ylab = "Kendall tau SUCRA vs average treatment effect", ylim=c(0,1))   # kendall correlation
lines(smooth.spline(log(samp_nt), SUCRAvsAvgTE_k, df = 5),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsAvgTE_s,
ylab = "Spearman rho SUCRA vs average treatment effect", ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(samp_nt), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(samp_nt), pBVvsAvgTE_k,
ylab = "Kendall tau pBV vs average treatment effect", ylim=c(0,1))   # kendall correlation
lines(smooth.spline(log(samp_nt), pBVvsAvgTE_k, df = 5),lwd=2,col="purple")
plot(log(samp_nt), pBVvsAvgTE_s,
ylab = "Spearman rho pBV vs average treatment effect", ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(samp_nt), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
dev.off()
# plots of average sample size per treatment in a network and Yilmaz AP/average overlap
pdf('plots_sampnt_AP&AO.pdf')
par(mfrow=c(2,4),
oma = c(1,1,0,0) + 0.1,
mar = c(1,4,1,1) + 0.1)
plot(log(samp_nt), pBVvsSUCRA_AP,
ylab = "Yilmaz tauAP pBV vs SUCRA", ylim=c(0,1))         # Yilmaz tauAP
lines(smooth.spline(log(samp_nt), pBVvsSUCRA_AP, df = 5),lwd=2,col="purple")
plot(log(samp_nt[match(names(pBVvsSUCRA_AO), names(samp_nt))]), pBVvsSUCRA_AO,
ylab = "Averge Overlap pBV vs SUCRA", ylim=c(0,1))         # Averge Overlap
lines(smooth.spline(log(samp_nt[match(names(pBVvsSUCRA_AO), names(samp_nt))]), pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsSUCRAjags_AP,
ylab = "Yilmaz tauAP SUCRA vs Bayesian SUCRA", ylim=c(0,1))   # Yilmaz tauAP
lines(smooth.spline(log(samp_nt), SUCRAvsSUCRAjags_AP, df = 5),lwd=2,col="purple")
plot(log(samp_nt[match(names(SUCRAvsSUCRAjags_AO), names(samp_nt))]), SUCRAvsSUCRAjags_AO,
ylab = "Averge Overlap SUCRA vs Bayesian SUCRA", ylim=c(0,1))   # Averge Overlap
lines(smooth.spline(log(samp_nt[match(names(SUCRAvsSUCRAjags_AO), names(samp_nt))]), SUCRAvsSUCRAjags_AO, df = 3),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsAvgTE_AP,
ylab = "Yilmaz tauAP SUCRA vs average treatment effect", ylim=c(0,1))   # Yilmaz tauAP
lines(smooth.spline(log(samp_nt), SUCRAvsAvgTE_AP, df = 5),lwd=2,col="purple")
plot(log(samp_nt[match(names(SUCRAvsAvgTE_AO), names(samp_nt))]), SUCRAvsAvgTE_AO,
ylab = "Averge Overlap SUCRA vs average treatment effect", ylim=c(0,1))   # Averge Overlap
lines(smooth.spline(log(samp_nt[match(names(SUCRAvsAvgTE_AO), names(samp_nt))]), SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(samp_nt), pBVvsAvgTE_AP,
ylab = "Yilmaz tauAP pBV vs average treatment effect", ylim=c(0,1))   # Yilmaz tauAP
lines(smooth.spline(log(samp_nt), pBVvsAvgTE_AP, df = 5),lwd=2,col="purple")
plot(log(samp_nt[match(names(pBVvsAvgTE_AO), names(samp_nt))]), pBVvsAvgTE_AO,
ylab = "Averge Overlap pBV vs average treatment effect", ylim=c(0,1))   # Averge Overlap
lines(smooth.spline(log(samp_nt[match(names(pBVvsAvgTE_AO), names(samp_nt))]), pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
par(mfrow=c(2,4),
oma = c(1,1,0,0) + 0.1,
mar = c(1,4,1,1) + 0.1)
plot(log(samp_nt), pBVvsSUCRA_k,
ylab = "Kendall tau pBV vs SUCRA", ylim=c(0,1))      # kendall correlation
lines(smooth.spline(log(samp_nt), pBVvsSUCRA_k, df = 5),lwd=2,col="purple")
plot(log(samp_nt), pBVvsSUCRA_s,
ylab = "Spearman rho pBV vs SUCRA", ylim=c(0,1))    # spearman correlation
lines(smooth.spline(log(samp_nt), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsSUCRAjags_k,
ylab = "Kendall tau SUCRA vs Bayesian SUCRA", ylim=c(0,1))  # kendall correlation
lines(smooth.spline(log(samp_nt), SUCRAvsSUCRAjags_k, df = 5),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsSUCRAjags_s,
ylab = "Spearman rho SUCRA vs Bayesian SUCRA", ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(samp_nt), SUCRAvsSUCRAjags_s, df = 5),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsAvgTE_k,
ylab = "Kendall tau SUCRA vs average treatment effect", ylim=c(0,1))   # kendall correlation
lines(smooth.spline(log(samp_nt), SUCRAvsAvgTE_k, df = 5),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsAvgTE_s,
ylab = "Spearman rho SUCRA vs average treatment effect", ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(samp_nt), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(samp_nt), pBVvsAvgTE_k,
ylab = "Kendall tau pBV vs average treatment effect", ylim=c(0,1))   # kendall correlation
lines(smooth.spline(log(samp_nt), pBVvsAvgTE_k, df = 5),lwd=2,col="purple")
plot(log(samp_nt), pBVvsAvgTE_s,
ylab = "Spearman rho pBV vs average treatment effect", ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(samp_nt), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(0,1))         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(0,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(0,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(0,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(0,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
library(splines)
# plots of relative range precision and correlations
pdf('~/Virginia/PhD project/Papers/Empirical evaluation ranking/plots_prec_range_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(0,1))         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(0,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(0,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(0,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(0,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
# plots of average precision and correlations
pdf('~/Virginia/PhD project/Papers/Empirical evaluation ranking/plots_prec_avg_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, ylim=c(0,1))         # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, ylim=c(0,1))     # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])), pBVvsSUCRA_AO,
ylim=c(0,1))         # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])), SUCRAvsAvgTE_AO,
ylim=c(0,1))   # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])), pBVvsAvgTE_AO,
ylim=c(0,1))    # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(0,1), cex=1.5)         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(0,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(0,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(0,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(0,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(0,1), cex.axis=1.5)         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(0,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(0,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(0,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(0,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
# plots of relative range precision and correlations
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(0,1), cex.axis=1.5)         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(0,1), cex.axis=1.5)   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(0,1), cex.axis=1.5)     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(0,1), cex.axis=1.5)         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(0,1), cex.axis=1.5)   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(0,1), cex.axis=1.5)     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(0,1), cex.axis=1.25)         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(0,1), cex.axis=1.25)   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(0,1), cex.axis=1.25)     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(0,1), cex.axis=1.25)         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(0,1), cex.axis=1.25)   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(0,1), cex.axis=1.25)     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
AvgTEprec_range["501267"]
log(log(1/as.numeric(AvgTEprec_range["501267"])))
install.packages("xlsx")
library(xlsx)
data501267 <- binaryDatasets[["501267"]]$data
trts501267 <- data.frame(data501267$`All cause mortality`,data501267$...12)[!is.na(data501267$...12),]
nma501267 <- binaryNetObjects[["501267"]]$netobj
install.packages("xlsx")
netgraph.netmeta(nma501267,labels = trts501267[,2], plastic=F,
thickness="se.random", multiarm = F,
points=T, cex.points = 4, col=1)
netgraph.netmeta(nma501267,labels = trts501267[,2], plastic=F,
thickness="se.random", multiarm = F,
points=T, scale=1.2, cex.points = 4, col=1)
netgraph.netmeta(nma501267,labels = trts501267[,2], plastic=F,
thickness="se.random", multiarm = F,
points=T, scale=1.2, cex.points = 4, col=1)
netgraph.netmeta(nma501267,labels = trts501267[,2], plastic=F,
thickness="se.random", multiarm = F,
points=T, cex.points = 4, col=1)
netgraph.netmeta(nma501267,labels = trts501267[,2], plastic=F,
thickness="se.random", multiarm = F,
points=T, col=1)
netgraph.netmeta(nma501267,labels = trts501267[,2], plastic=F,
thickness="se.random", multiarm = F,
points=T, cex.points = 4, col=1)
forest(nma501267, ref = "1", xlim=c(0.2,3.5), sortvar = "TE", labels = trts501267[,2], smlab = "Comparison: Treatment vs Placebo\nOriginal Data", fs.smlab=10)
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, ylim=c(0,1), cex.axis=1.25)         # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, ylim=c(0,1), cex.axis=1.25)   # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, ylim=c(0,1), cex.axis=1.25)     # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])), pBVvsSUCRA_AO,
ylim=c(0,1), cex.axis=1.25)         # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])), SUCRAvsAvgTE_AO,
ylim=c(0,1), cex.axis=1.25)   # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])), pBVvsAvgTE_AO,
ylim=c(0,1), cex.axis=1.25)    # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
View(finalDB)
