jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
head(binary_rm)
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
# create lists with only ranks for kendall correlation
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
# calculate spearman correlation
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
# save all pBV vs SUCRA in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"SUCRA_ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"SUCRA_ranks"], decreasing=F)))
names(pBVvsSUCRA_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
res_pBVvsSUCRA_s <- paste0(summary(pBVvsSUCRA_s, digits = 3)["Median"], " (", summary(pBVvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_k <-paste0(summary(pBVvsSUCRA_k, digits = 3)["Median"], " (", summary(pBVvsSUCRA_k, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_AP <-paste0(summary(pBVvsSUCRA_AP, digits = 3)["Median"], " (", summary(pBVvsSUCRA_AP, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AP, digits = 3)["3rd Qu."], ")")
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(pBVvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_AP)
head(pBVvsAvgTE_AO)
res_pBVvsAvgTE_s <- paste0(summary(pBVvsAvgTE_s, digits = 3)["Median"], " (", summary(pBVvsAvgTE_s, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_s, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_k <-paste0(summary(pBVvsAvgTE_k, digits = 3)["Median"], " (", summary(pBVvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_AP <-paste0(summary(pBVvsAvgTE_AP, digits = 3)["Median"], " (", summary(pBVvsAvgTE_AP, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_AP, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs Avg TE in a vector separately for kendall, spearman and AP, then store median and interquartile range
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(SUCRAvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
head(SUCRAvsAvgTE_AP)
head(SUCRAvsAvgTE_AO)
res_SUCRAvsAvgTE_s <- paste0(summary(SUCRAvsAvgTE_s, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_s, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_k <- paste0(summary(SUCRAvsAvgTE_k, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_AP <- paste0(summary(SUCRAvsAvgTE_AP, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_AP, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AP, digits = 3)["3rd Qu."], ")")
#   res_SUCRAvsAvgTE_AO <-paste0(summary(SUCRAvsAvgTE_AO[[]][3], digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_AO[[]][3], digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AO[[]][3], digits = 3)["3rd Qu."], ")")
# save all SUCRA vs SUCRA jags in a vector separately for kendall and spearman, then store median and interquartile range
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)))
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
# store 'normalized' precision for Avg TE in each network in a vector
AvgTEprec_v <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec var"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec var"]))
# store average precision for Avg TE in each network in a vector
AvgTEprec_avg <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec avg"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec avg"]))
names(AvgTEprec_v) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_v)
names(AvgTEprec_avg) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_avg)
source("plots.R")
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
View(nmadb_used)
readByID(501196)
readByID(501207)
which(nmadb_used$Record.ID==501206)
which(nmadb_used$Record.ID==501217)
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
# nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
# get IDs of networks separately for binary and continuous outcome; those with inverse-variance excluded
binaryIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Binary" & nmadb$Format!="iv",]$Record.ID
continuousIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Record.ID
# calculate ranking metrics for continuous outcome networks
continuous_rm = lapply(continuousIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(continuous_rm) <- as.character(continuousIDs)
head(continuous_rm)
# calculate ranking metrics for binary outcome networks
binary_rm = lapply(binaryIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
head(binary_rm)
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
# create lists with only ranks for kendall correlation
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
# create lists with only ranking metrics values for spearman correlation
# con_values <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
# bin_values <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
# calculate spearman correlation
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
# calculate spearman correlation
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
as.numeric(con_ranks)
# calculate kendall correlation
kendall_con <- sapply(con_ranks, cor, method="kendall")
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
# calculate kendall correlation
kendall_con <- mapply(con_ranks, cor, method="kendall")
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
nmadb = getNMADB()
# get IDs of networks separately for binary and continuous outcome; those with inverse-variance excluded
binaryIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Binary" & nmadb$Format!="iv",]$Record.ID
continuousIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Record.ID
# calculate ranking metrics for continuous outcome networks
continuous_rm = lapply(continuousIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/Insomnia/MyrtoIncludedAllOutcomesClean27.6dVirgi.xlsx", na = "NA")
#describe the data
tapply(DATA$N_arm_total_stapf,DATA$Drug_name,sum,na.rm=T)
print(length(table(DATA$Drug_name)))
print(length(table(DATA$Final_ID_all)))
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#remove rows for studies disconnected from main network
DPs <- subset(DATApairs, treat2!="waitlist" & treat2!="artificial juice" & treat2!="sleep hygiene" & treat2!="oxazepam")
DPs <- DPs[-grep("LAT",DPs$treat2),]
# use threshold value for those with p-value <0.001
DPs[DPs$studlab==185, "tst_PorF-value"] <- 0.00099
#now calculate adjusted SE for remaining crossover studies
DPs$tvalue <- qt(as.numeric(DPs$`tst_PorF-value`)/2, df=DPs$n1-1, lower.tail = F)
DPs$tvalue
DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
DPs$SDd
DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
#check p-value availability for paired t-test for crossover studies with both phases used
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,c("studlab","tst_PorF-value","tst_p=0, f=1")]
DPs$rho
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DPs$n1+DPs$TE/(2*DPs$n1))*(2-2*DPs$rho))[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.07, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.08, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.10, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.18, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.2, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.5, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
DPs[,c("studlab","rho")]
DPs[DPs$studlab==18|DPs$studlab==185,DPs$rho]
DPs[DPs$studlab==18|DPs$studlab==185,"rho"]
DPs[DPs$studlab==18|DPs$studlab==185,"rho"] <- 0.9
DPs[DPs$studlab==18|DPs$studlab==185,"rho"]
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.5, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
DPs[DPs$studlab==18|DPs$studlab==185,"rho"] <- 0.85
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.5, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DPs$n1+DPs$TE/(2*DPs$n1))*(2-2*DPs$rho))[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.5, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
#network plot
netgraph(EFF, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
EFF
#forest plots
forest(EFF, ref="Placebo", sortvar = -Pscore,xlab="SMD")
#forest plots
forest(EFF, ref="Placebo", sortvar = -Pscore,xlab="SMD")
forest.netmeta(EFF, ref="Placebo", sortvar = -Pscore,xlab="SMD")
#forest plots
forest(EFF, ref="pbo", sortvar = -Pscore,xlab="SMD")
netrank(EFF)
View(DPs)
View(DATA)
netrank(EFF, small.values = "bad")
netrank(EFF)
cat(paste("tau=",round(EFF$tau,3)))
cat(paste("I2=",round(EFF$I2),"%"))
split=netsplit(EFF)
split
SIDEp=split$compare.random$p
SIDEp=SIDEp[!is.na(SIDEp)]
SIDEp
#proportion of inconsistent loops
cat(length(SIDEp))
cat(length(SIDEp[SIDEp<=0.1]))
cat(paste(round((length(SIDEp[SIDEp<=0.1])/length(SIDEp))*100,1),"%"))
The p-value from the design-by-treatment test is
a=decomp.design(EFF)
print(round(a$Q.inc.random$pval,3))
# assign other correlation to study 18 and 185
DPs[,c("studlab","rho")]
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#remove rows for studies disconnected from main network
DPs <- subset(DATApairs, treat2!="waitlist" & treat2!="artificial juice" & treat2!="sleep hygiene" & treat2!="oxazepam")
DPs <- DPs[-grep("LAT",DPs$treat2),]
#check p-value availability for paired t-test for crossover studies with both phases used
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,c("studlab","tst_PorF-value","tst_p=0, f=1")]
# use threshold value for those with p-value <0.001
DPs[DPs$studlab==185, "tst_PorF-value"] <- 0.00099
#check p-value availability for paired t-test for crossover studies with both phases used
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,c("studlab","tst_PorF-value","tst_p=0, f=1")]
#now calculate adjusted SE for remaining crossover studies
DPs$tvalue <- qt(as.numeric(DPs$`tst_PorF-value`)/2, df=DPs$n1-1, lower.tail = F)
DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DPs$n1+DPs$TE/(2*DPs$n1))*(2-2*DPs$rho))[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.5, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
# assign other correlation to study 18 and 185
DPs[,c("studlab","rho")]
DPs[DPs$studlab==18|DPs$studlab==185,"rho"] <- 0.9
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T)
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05, details.chkmultiarm = T)
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.1, details.chkmultiarm = T)
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.2, details.chkmultiarm = T)
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.5, details.chkmultiarm = T)
DPs[DPs$studlab==18|DPs$studlab==185,"rho"] <- 0.85
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05, details.chkmultiarm = T)
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.5, details.chkmultiarm = T)
DPs[DPs$studlab==18|DPs$studlab==185,"rho"] <- 0.9
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DPs$n1+DPs$TE/(2*DPs$n1))*(2-2*DPs$rho))[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T)
EFF
#network plot
netgraph(EFF, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
#forest plots
forest(EFF, ref="pbo", sortvar = -Pscore,xlab="SMD")
netrank(EFF, small.values = "bad")
cat(paste("tau=",round(EFF$tau,3)))
The heterogeneity standard deviation is estimated at
```{r, echo=FALSE}
cat(paste("tau=",round(EFF$tau,3)))
```
and I-square (total) is
```{r, echo=FALSE}
cat(paste("I2=",round(EFF$I2),"%"))
```
cat(paste("I2=",round(EFF$I2),"%"))
#only non-crossover
InsoTSTsen=subset(DPs,Crossoverstudy==1 &`crossover, not first phase used`==1)
View(InsoTSTsen)
#only non-crossover
InsoTSTsen=subset(DPs,Crossoverstudy!=1 &`crossover, not first phase used`!=1)
View(InsoTSTsen)
TSTsens<-netmeta(TE,seTE,treat1,treat2,studlab,data=InsoTSTsen_pw,  sm="SMD",comb.fixed =F, comb.random = T, tol.multiarm=T)
TSTsens<-netmeta(TE,seTE,treat1,treat2,studlab,data=InsoTSTsen_pw,  sm="SMD",comb.fixed =F, comb.random = T)
InsoTSTsen_pw=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
TSTsens<-netmeta(TE,seTE,treat1,treat2,studlab,data=InsoTSTsen_pw,  sm="SMD",comb.fixed =F, comb.random = T)
netconnection(treat1,treat2,studlab,data=InsoTSTsen_pw,warn = T)
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#remove rows for studies disconnected from main network
DPs <- subset(DATApairs, treat2!="waitlist" & treat2!="artificial juice" & treat2!="sleep hygiene" & treat2!="oxazepam")
DPs <- DPs[-grep("LAT",DPs$treat2),]
#check p-value availability for paired t-test for crossover studies with both phases used
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,c("studlab","tst_PorF-value","tst_p=0, f=1")]
# use threshold value for those with p-value <0.001
DPs[DPs$studlab==185, "tst_PorF-value"] <- 0.00099
#now calculate adjusted SE for remaining crossover studies
DPs$tvalue <- qt(as.numeric(DPs$`tst_PorF-value`)/2, df=DPs$n1-1, lower.tail = F)
DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DPs$n1+DPs$TE/(2*DPs$n1))*(2-2*DPs$rho))[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05, details.chkmultiarm = T)    ### gives error: Problems in multi-arm studies! Studies with negative treatment arm variance: '18', '185'
#only non-crossover
InsoTSTsen=subset(DPs,Crossoverstudy!=1 &`crossover, not first phase used`!=1)
View(InsoTSTsen)
InsoTSTsen_pw=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=InsoTSTsen, studlab = Final_ID_all, sm= "SMD")
TSTsens<-netmeta(TE,seTE,treat1,treat2,studlab,data=InsoTSTsen,  sm="SMD",comb.fixed =F, comb.random = T)
TSTsens
forest(TSTsens, ref="pbo",sortvar = -Pscore, smlab="Only head-to-head studies", fontsize=10)
