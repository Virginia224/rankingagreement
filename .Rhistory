ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
# store relative range of precision for Avg TE in each network in a vector
AvgTEprec_range <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec range"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec range"]))
# store average precision for Avg TE in each network in a vector
AvgTEprec_avg <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec avg"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec avg"]))
names(AvgTEprec_range) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_range)
names(AvgTEprec_avg) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_avg)
summary(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))])
summary(SUCRAvsSUCRAjags_k[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_k))])
summary(SUCRAvsSUCRAjags_AP[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AP))])
summary(SUCRAvsSUCRAjags_AO[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AO)))])
sumSUCRAs <-  summary(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))])
sumSUCRAs <-  summary(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))])
sumSUCRAk <- summary(SUCRAvsSUCRAjags_k[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_k))])
sumSUCRAap <- summary(SUCRAvsSUCRAjags_AP[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AP))])
sumSUCRAao <- summary(SUCRAvsSUCRAjags_AO[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AO)))])
sumSUCRAs["Median"]
# check agreement between the two SUCRA only for networks with original measures OR or SMD ans save these in results for the paper
sumSUCRAs <-  summary(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))], digits = 2)
sumSUCRAk <- summary(SUCRAvsSUCRAjags_k[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_k))], digits = 2)
sumSUCRAap <- summary(SUCRAvsSUCRAjags_AP[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AP))], digits = 2)
sumSUCRAao <- summary(SUCRAvsSUCRAjags_AO[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AO)))], digits = 2)
results["Spearman rho","SUCRA vs SUCRAjags"] <- paste0(sumSUCRAs["Median"], " (", sumSUCRAs["1st Qu."], ", ", sumSUCRAs["3rd Qu."], ")")
View(results)
results["Spearman rho","SUCRA vs SUCRAjags"] <- paste0(sumSUCRAs["Median"], " (", sumSUCRAs["1st Qu."], ", ", sumSUCRAs["3rd Qu."], ")")
results["Kendall tau","SUCRA vs SUCRAjags"]  <- paste0(sumSUCRAk["Median"], " (", sumSUCRAk["1st Qu."], ", ", sumSUCRAk["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs SUCRAjags"] <- paste0(sumSUCRAap["Median"], " (", sumSUCRAap["1st Qu."], ", ", sumSUCRAap["3rd Qu."], ")")
results["Average Overlap","SUCRA vs SUCRAjags"] <-paste0(sumSUCRAao["Median"], " (", sumSUCRAao["1st Qu."], ", ", sumSUCRAao["3rd Qu."], ")")
View(results)
sum(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))]>0.9)/
length(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))])
sum(SUCRAvsSUCRAjags_k[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_k)))]>0.9)/
length(SUCRAvsSUCRAjags_k[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_k)))])
sum(SUCRAvsSUCRAjags_AO[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_AO)))]>0.9)/
length(SUCRAvsSUCRAjags_AO[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_AO)))])
write.xlsx(results, "agreement results.xlsx")
write.xlsx(results, "agreement results.xlsx")
sum(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))]>0.9)/
length(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))])
SUCRAvsSUCRAjags_s[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))][SUCRAvsSUCRAjags_s[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s)))]<0.9]
length(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))])
sum(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))]>0.8999999)/
length(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))])
sum(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))]>0.9)/
length(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))])
sum(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))]>0.9)
length(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))])
SUCRAvsSUCRAjags_s[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))][SUCRAvsSUCRAjags_s[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s)))]<0.9]
SUCRAvsSUCRAjags_s["501387 "]
SUCRAvsSUCRAjags_s["501387"]
round(SUCRAvsSUCRAjags_s["501387"], digits = 15)
sum(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))]>0.9)/
length(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))])
sum(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))]>0.8999)/
length(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))])
kendall_con <- round(lapply(con_ranks, cor, method="kendall"), digits = 3)
round(kendall_con, digits = 3)
pSCOREvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) round(spearman_con[[i]]["Pscore_ranks","SUCRA_ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(spearman_bin[[i]]["Pscore_ranks","SUCRA_ranks"], digits = 3)))
names(pSCOREvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
res_pSCOREvsSUCRA_s <- paste0(summary(pSCOREvsSUCRA_s, digits = 3)["Median"], " (", summary(pSCOREvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pSCOREvsSUCRA_s, digits = 3)["3rd Qu."], ")")
sum(pSCOREvsSUCRA_s>0.99)/length(pSCOREvsSUCRA_s) # % of networks with spearman correlation >0.99
print(pSCOREvsSUCRA_s[pSCOREvsSUCRA_s<0.99])
binaryDatasets["482231"]
binary_rm["482231"]
# prepare matrix to store results
results <- matrix(nrow = 4, ncol = 4,
dimnames = list(c("Spearman rho", "Kendall tau", "Yilmaz tauAP", "Average Overlap"),
c("pBV vs SUCRA", "SUCRA vs ATE", "pBV vs ATE", "SUCRA vs SUCRAjags")))
# save all pBV vs SUCRA in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) round(spearman_con[[i]]["pBV ranks","SUCRA_ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(spearman_bin[[i]]["pBV ranks","SUCRA_ranks"], digits = 3)))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) round(kendall_con[[i]]["pBV ranks","SUCRA_ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(kendall_bin[[i]]["pBV ranks","SUCRA_ranks"], digits = 3)))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AP <- c(sapply(1:length(con_ranks), function(i) round(tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"SUCRA_ranks"], decreasing=F), digits = 3)),
sapply(1:length(bin_ranks), function(i) round(tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"SUCRA_ranks"], decreasing=F), digits = 3)))
names(pBVvsSUCRA_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(con_ranks[[i]][,"pBV ranks"]),order(con_ranks[[i]][,"SUCRA_ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(bin_ranks[[i]][,"pBV ranks"]),order(bin_ranks[[i]][,"SUCRA_ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- Filter(Negate(anyNA), pBVvsSUCRA_AO)   ## exclude any NAs
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
head(SUCRAvsAvgTE_AO)
results["Spearman rho","pBV vs SUCRA"] <- paste0(summary(pBVvsSUCRA_s, digits = 2)["Median"], " (", summary(pBVvsSUCRA_s, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_k, digits = 2)["Median"], " (", summary(pBVvsSUCRA_k, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_AP, digits = 2)["Median"], " (", summary(pBVvsSUCRA_AP, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_AO, digits = 2)["Median"], " (", summary(pBVvsSUCRA_AO, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_AO, digits = 2)["3rd Qu."], ")")
# save all SUCRA vs Avg TE in a vector separately for kendall, spearman and AP, then store median and interquartile range
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) round(spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"], digits = 3)))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) round(kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"], digits = 3)))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) round(tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F), digits = 3)),
sapply(1:length(bin_ranks), function(i) round(tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F), digits = 3)))
names(SUCRAvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(con_ranks[[i]][,"SUCRA_ranks"]),order(con_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(bin_ranks[[i]][,"SUCRA_ranks"]),order(bin_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}))
names(SUCRAvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- Filter(Negate(anyNA), SUCRAvsAvgTE_AO)   ## exclude any NAs
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
head(SUCRAvsAvgTE_AP)
head(SUCRAvsAvgTE_AO)
results["Spearman rho","SUCRA vs ATE"] <- paste0(summary(SUCRAvsAvgTE_s, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_s, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","SUCRA vs ATE"]  <- paste0(summary(SUCRAvsAvgTE_k, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs ATE"] <- paste0(summary(SUCRAvsAvgTE_AP, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_AP, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","SUCRA vs ATE"] <-paste0(summary(SUCRAvsAvgTE_AO, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_AO, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AO, digits = 2)["3rd Qu."], ")")
# save all pBV vs Avg TE in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) round(spearman_con[[i]]["pBV ranks","Avg TE ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(spearman_bin[[i]]["pBV ranks","Avg TE ranks"], digits = 3)))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) round(kendall_con[[i]]["pBV ranks","Avg TE ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(kendall_bin[[i]]["pBV ranks","Avg TE ranks"], digits = 3)))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) round(tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F), digits = 3)),
sapply(1:length(bin_ranks), function(i) round(tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F), digits = 3)))
names(pBVvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(con_ranks[[i]][,"pBV ranks"]),order(con_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(bin_ranks[[i]][,"pBV ranks"]),order(bin_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}))
names(pBVvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- Filter(Negate(anyNA), pBVvsAvgTE_AO)   ## exclude any NAs
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_AP)
head(pBVvsAvgTE_AO)
results["Spearman rho","pBV vs ATE"] <- paste0(summary(pBVvsAvgTE_s, digits = 2)["Median"], " (", summary(pBVvsAvgTE_s, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","pBV vs ATE"]  <-paste0(summary(pBVvsAvgTE_k, digits = 2)["Median"], " (", summary(pBVvsAvgTE_k, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","pBV vs ATE"]  <-paste0(summary(pBVvsAvgTE_AP, digits = 2)["Median"], " (", summary(pBVvsAvgTE_AP, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","pBV vs ATE"] <-paste0(summary(pBVvsAvgTE_AO, digits = 2)["Median"], " (", summary(pBVvsAvgTE_AO, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_AO, digits = 2)["3rd Qu."], ")")
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) round(spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"], digits = 3)))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) round(kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"], digits = 3)),
sapply(1:length(bin_ranks), function(i) round(kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"], digits = 3)))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AP <- c(sapply(1:length(con_ranks), function(i) round(tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"SUCRAjags ranks"], decreasing=F), digits = 3)),
sapply(1:length(bin_ranks), function(i) round(tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"SUCRAjags ranks"], decreasing=F), digits = 3)))
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(con_ranks[[i]][,"SUCRA_ranks"]),order(con_ranks[[i]][,"SUCRAjags ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{round(averageoverlap(order(bin_ranks[[i]][,"SUCRA_ranks"]),order(bin_ranks[[i]][,"SUCRAjags ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)), digits = 3)}
else {NA}))
names(SUCRAvsSUCRAjags_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- Filter(Negate(anyNA), SUCRAvsSUCRAjags_AO)   ## exclude any NAs
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
# check agreement between the two SUCRA only for networks with original measures OR or SMD ans save these in results for the paper
sumSUCRAs <-  summary(SUCRAvsSUCRAjags_s[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s))], digits = 2)
sumSUCRAk <- summary(SUCRAvsSUCRAjags_k[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_k))], digits = 2)
sumSUCRAap <- summary(SUCRAvsSUCRAjags_AP[match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AP))], digits = 2)
sumSUCRAao <- summary(SUCRAvsSUCRAjags_AO[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_AO)))], digits = 2)
results["Spearman rho","SUCRA vs SUCRAjags"] <- paste0(sumSUCRAs["Median"], " (", sumSUCRAs["1st Qu."], ", ", sumSUCRAs["3rd Qu."], ")")
results["Kendall tau","SUCRA vs SUCRAjags"]  <- paste0(sumSUCRAk["Median"], " (", sumSUCRAk["1st Qu."], ", ", sumSUCRAk["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs SUCRAjags"] <- paste0(sumSUCRAap["Median"], " (", sumSUCRAap["1st Qu."], ", ", sumSUCRAap["3rd Qu."], ")")
results["Average Overlap","SUCRA vs SUCRAjags"] <-paste0(sumSUCRAao["Median"], " (", sumSUCRAao["1st Qu."], ", ", sumSUCRAao["3rd Qu."], ")")
SUCRAs_90 <- sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
SUCRAk_90 <- sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
SUCRAap_90 <-  sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
SUCRAao_90 <- sum(SUCRAvsSUCRAjags_AO>0.9)/length(SUCRAvsSUCRAjags_AO)# % of networks with AO >0.9
sum(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))]>0.8999)/
length(SUCRAvsSUCRAjags_s[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))])
sum(SUCRAvsSUCRAjags_k[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_k)))]>0.9)/
length(SUCRAvsSUCRAjags_k[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_k)))])
sum(SUCRAvsSUCRAjags_AO[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_AO)))]>0.9)/
length(SUCRAvsSUCRAjags_AO[Filter(Negate(anyNA),
match(nmadb[nmadb$Effect.Measure=="odds ratio" | nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_AO)))])
SUCRAvsSUCRAjags_s[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"],
names(SUCRAvsSUCRAjags_s)))][SUCRAvsSUCRAjags_s[Filter(Negate(anyNA), match(nmadb[nmadb$Effect.Measure=="odds ratio" |
nmadb$Effect.Measure=="standardized mean difference","Record.ID"], names(SUCRAvsSUCRAjags_s)))]<0.9]
write.xlsx(results, "agreement results.xlsx")
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
# store relative range of precision for Avg TE in each network in a vector
AvgTEprec_range <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec range"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec range"]))
# store average precision for Avg TE in each network in a vector
AvgTEprec_avg <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec avg"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec avg"]))
names(AvgTEprec_range) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_range)
names(AvgTEprec_avg) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_avg)
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source("plots.R")
library(splines)
# plots of relative range precision and correlations
pdf('~/Virginia/PhD project/Papers/Empirical evaluation ranking/plots_prec_range_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(0,1))         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(0,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(0.3,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(0.3,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(0.3,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
# plots of average precision and correlations
pdf('~/Virginia/PhD project/Papers/Empirical evaluation ranking/plots_prec_avg_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,1.5,1,1) + 0.1)
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, ylim=c(0,1))         # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, df = 5),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, ylim=c(0,1))   # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, ylim=c(0,1))     # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, df = 5),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])), pBVvsSUCRA_AO,
ylim=c(0.3,1))         # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])), SUCRAvsAvgTE_AO,
ylim=c(0.3,1))   # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])), pBVvsAvgTE_AO,
ylim=c(0.3,1))    # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
ext_prec_range <- AvgTEprec_range[log(log(1/as.numeric(AvgTEprec_range)))<=-4]
ext_prec_range_NMA <- lapply(match(names(ext_prec_range), names(binaryNetObjects)), function(id) {
pdf(file = paste('~/Virginia/PhD project/Papers/Empirical evaluation ranking/example extreme precision values/plots', binaryNetObjects[[id]]$rid, 'extreme prec range.pdf'))
nma = binaryNetObjects[[id]]$netobj
netplot = netgraph(nma, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
return(list(binaryNetObjects[[id]]$rid, summary(nma)))
dev.off()
}
)
graphics.off()
# get networks with largest average precision
ext_prec_avg <- AvgTEprec_avg[log(as.numeric(AvgTEprec_avg))>3]
ext_prec_avg_NMA <- lapply(match(names(ext_prec_avg), names(continuousNetObjects)), function(id) {
pdf(file = paste('~/Virginia/PhD project/Papers/Empirical evaluation ranking/example extreme precision values/plots', continuousNetObjects[[id]]$rid, 'extreme prec avg.pdf'))
nma = continuousNetObjects[[id]]$netobj
netplot = netgraph(nma, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
return(list(continuousNetObjects[[id]]$netobj, summary(nma)))
dev.off()
}
)
graphics.off()
### choose network 501267
AvgTEprec_range["501267"]
log(log(1/as.numeric(AvgTEprec_range["501267"])))
install.packages("xlsx")
library(xlsx)
data501267 <- binaryDatasets[["501267"]]$data
trts501267 <- data.frame(data501267$`All cause mortality`,data501267$...12)[!is.na(data501267$...12),]
nma501267 <- binaryNetObjects[["501267"]]$netobj
netgraph.netmeta(nma501267,labels = trts501267[,2], plastic=F,
thickness="se.random", multiarm = F,
points=T, cex.points = 2.5, col=1)
forest(nma501267, ref = "1", sortvar = "TE", labels = trts501267[,2])
install.packages("xlsx")
alt501267 <- alternativenma(nma501267)
install_github("esm-ispm-unibe-ch/alternativenma")
library(alternativenma)
plot.alternativenma(alt501267, xmin = -0.5, xmax = 5, treatmentplacement = -0.1, effectplacement = 4)
library(rankingagreement)
rm_501267 <- cbind(netmetaranks_H(nma501267,1000), "AVG"=rankingagreement::alternativenma(nma501267)$averages[order(rownames(rankingagreement::alternativenma(nma501267)$averages)),c("TE", "TE_ranks")], nmajagsranks_bin(data501267))
ranks_501267 <- rm_501267[,c("pBV ranks", "SUCRA_ranks", "AVG.TE_ranks")]
rownames(ranks_501267) <- trts501267[,2]
write.xlsx(ranks_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Papers/Empirical evaluation ranking/example extreme precision values/ranks_501267.xlsx')
kendall_501267 <- cor(ranks_501267, method="kendall")
spearman_501267 <- cor(ranks_501267, method="spearman")
View(kendall_501267)
kendall_501267 <- round(cor(ranks_501267, method="kendall"), digits = 3)
spearman_501267 <- round(cor(ranks_501267, method="spearman"), digits = 3)
View(kendall_501267)
AP_pBV_SUCRA <- round(tauAP_b(ranks_501267[,"pBV ranks"],ranks_501267[,"SUCRA_ranks"],decreasing = F), digits = 3)
AP_pBV_ATE <- round(tauAP_b(ranks_501267[,"pBV ranks"],ranks_501267[,"AVG.TE_ranks"],decreasing = F), digits = 3)
AP_SUCRA_ATE <- round(tauAP_b(ranks_501267[,"SUCRA_ranks"],ranks_501267[,"AVG.TE_ranks"],decreasing=F), digits = 3)
AO_pBV_SUCRA <- round(averageoverlap(order(ranks_501267[,"pBV ranks"]),order(ranks_501267[,"SUCRA_ranks"]),4), digits = 3)
AO_pBV_ATE <- round(averageoverlap(order(ranks_501267[,"pBV ranks"]),order(ranks_501267[,"AVG.TE_ranks"]),4), digits = 3)
AO_SUCRA_ATE <- round(averageoverlap(order(ranks_501267[,"SUCRA_ranks"]),order(ranks_501267[,"AVG.TE_ranks"]),4), digits = 3)
agreement_501267 <- matrix(data = round(c(spearman_501267[lower.tri(spearman_501267)], kendall_501267[lower.tri(kendall_501267)],
AP_pBV_SUCRA, AP_pBV_ATE, AP_SUCRA_ATE, AO_pBV_SUCRA, AO_pBV_ATE, AO_SUCRA_ATE), digits = 2),
nrow = 4, ncol = 3, byrow = T,
dimnames = list(c("Spearman rho", "Kendall tau", "Yilmaz tauAP", "Average Overlap"),
c("pBV vs SUCRA", "pBV vs ATE", "SUCRA vs ATE")))
write.xlsx(agreement_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Papers/Empirical evaluation ranking/example extreme precision values/agreement_501267.xlsx')
# edit dataset (precision for treatment 2) to show differences in agreement
# data501267[data501267$t==2,]
# data501267[data501267$id==17,]
# data501267edit <- data501267
# data501267edit[data501267edit$id==17,c("r","n")] <- rbind(c(2800,3000), c(2800,3000))
data501267editPW <- pairwise(t, r, n, data = data501267, studlab = id)
data501267editPW[data501267editPW$treat1==2 | data501267editPW$treat2==2,c("studlab", "seTE")]
netgraph.netmeta(nma501267,labels = trts501267[,2], plastic=F,
thickness="se.random", multiarm = F,
points=T, cex.points = 2.5, col=1)
forest(nma501267, ref = "1", sortvar = "TE", labels = trts501267[,2])
data501267editPW[data501267editPW$studlab==17,"seTE"] <- 0.01
nma501267edit <- netmeta(data501267editPW)
forest(nma501267edit, xlim=c(0.5,2), ref = "1", sortvar = "-Pscore", labels = trts501267[,2])
rm_501267edit <- cbind(netmetaranks_H(nma501267edit,1000),
"AVG"=rankingagreement::alternativenma(nma501267edit)$averages[order(rownames(rankingagreement::alternativenma(nma501267edit)$averages)),
c("TE", "TE_ranks")]#, nmajagsranks_bin(data501267edit)
)
rm_501267edit
round(c(AO_pBV_ATE, AO_SUCRA_ATE), digits = 2)
labels2=strsplit(rownames(averages0),":")[[1]][1]
#####################################################################
#   A function to alternatively parametrise network meta-analysis   #
#####################################################################
# Arguments:
#netmetaobject: An object of class netmeta
#random: A logical indicating whether a random effects meta-analysis should be conducted.
#small.values: A character string specifying whether small treatment effects indicate a "good" or "bad" effect
#####################################################################
alternativenma <- function(netmetaobject,random=T,small.values="good"){
require(magic)
require(netmeta)
#run network meta-analysis as a two stage meta-regression model
if (random==T)  a <- nma.krahn.output(netmetaobject,tau.preset = netmetaobject$tau)
if (random==F)  a <- nma.krahn.output(netmetaobject,tau.preset = 0)
#define design matrices for the alternative parametrisation
#X.alt is the Y* matrix and X.obs.alt is the X^C* in the paper
X.alt=rbind(a$X.full[1:(a$n-1),]-1, a$X.full[a$n:nrow(a$X.full),])
X.obs2.design.alt <- X.alt[a$direct2$comparison, , drop = FALSE]
#define design matrix in the case of multi arm studies
if (a$multiarm) {
X.obs3.design.alt <- X.alt[as.character(a$basics), ]
X.obs.alt <- rbind(X.obs2.design.alt, X.obs3.design.alt)
}
if (!a$multiarm)
{X.obs.alt <- X.obs2.design.alt}
#estimate the effects versus average and the network meta-analysis effects
avs <-  solve(t(X.obs.alt) %*% solve(a$V) %*% X.obs.alt) %*% t(X.obs.alt) %*% solve(a$V) %*% a$TE.dir
TE.net.avs <- X.alt %*% avs
#variance covariance matrix of avs
covTE.net.base.alt <- solve(t(X.obs.alt) %*% solve(a$V) %*% X.obs.alt)
#data frame with avs and their standard errors
averages0 <- data.frame(TE = avs, seTE = sqrt(diag(covTE.net.base.alt)))
#estimation of effect versus average and its standard error for the reference treatment
cnb=as.matrix(covTE.net.base.alt)
refavvar=sum(diag(cnb))+sum(2*cnb[lower.tri(cnb)])
labels1=rep(0,a$n-1)
for(i in 1:(a$n-1)){
labels1[i]=strsplit(rownames(averages0),":")[[i]][2]
}
labels2=strsplit(rownames(averages0),":")[[1]][1]
labels=c(labels1,labels2)
z1=qnorm(1-0.05/2, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
TE = round(c(avs,-sum(avs)), digits = 3)
seTE = round(c(sqrt(diag(covTE.net.base.alt)),sqrt(refavvar)), digits = 3)
lower= TE - z1*seTE
upper= TE + z1*seTE
#calculation of probabilities of being better than the average
Pscoreaverage=rep(0,a$n)
if (small.values=="good") {Pscoreaverage=pnorm(TE/seTE)        #change from original altnma script: swapped with one from "if" below to match Pscore equation in paper
TE_ranks=(a$n+1) - rank(TE)}
if (small.values=="bad") {Pscoreaverage=1-pnorm(TE/seTE)
TE_ranks=rank(TE)}
#summary of results
averages=data.frame(TE = TE, seTE = seTE, lower=lower, upper=upper, TE_ranks, Pscoreaverage=Pscoreaverage)
rownames(averages)=labels
res <- list(n = a$n,
trts = a$trts,
comparisons = a$comparisons,
studies = a$studies,
X.alt=X.alt,
X.obs.alt=X.obs.alt,
averages=averages,
TE.net.avs=TE.net.avs)
class(res) <- "alternativenma"
res
}
kendall_501267edit <- cor(ranks_501267edit, method="kendall")
spearman_501267edit <- cor(ranks_501267edit, method="spearman")
AP_pBV_SUCRAedit <- tauAP_b(ranks_501267edit[,"pBV ranks"],ranks_501267edit[,"SUCRA_ranks"],decreasing = F)
AP_pBV_ATEedit <- tauAP_b(ranks_501267edit[,"pBV ranks"],ranks_501267edit[,"AVG.TE_ranks"],decreasing = F)
AP_SUCRA_ATEedit <- tauAP_b(ranks_501267edit[,"SUCRA_ranks"],ranks_501267edit[,"AVG.TE_ranks"],decreasing=F)
AO_pBV_SUCRAedit <- averageoverlap(order(ranks_501267edit[,"pBV ranks"]),order(ranks_501267edit[,"SUCRA_ranks"]),4)
AO_pBV_ATEedit <- averageoverlap(order(ranks_501267edit[,"pBV ranks"]),order(ranks_501267edit[,"AVG.TE_ranks"]),4)
AO_SUCRA_ATEedit <- averageoverlap(order(ranks_501267edit[,"SUCRA_ranks"]),order(ranks_501267edit[,"AVG.TE_ranks"]),4)
matrix(data = round(c(spearman_501267edit[lower.tri(spearman_501267edit)], kendall_501267edit[lower.tri(kendall_501267edit)],
AP_pBV_SUCRAedit, AP_pBV_ATEedit, AP_SUCRA_ATEedit, AO_pBV_SUCRAedit, AO_pBV_ATEedit, AO_SUCRA_ATEedit), digits = 2),
nrow = 4, ncol = 3, byrow = T,
dimnames = list(c("Spearman rho", "Kendall tau", "Yilmaz tauAP", "Average Overlap"),
c("pBV vs SUCRA", "pBV vs ATE", "SUCRA vs ATE")))
ranks_501267edit <- rm_501267edit[,c("pBV ranks", "SUCRA_ranks", "AVG.TE_ranks")]
rownames(ranks_501267edit) <- trts501267[,2]
kendall_501267edit <- cor(ranks_501267edit, method="kendall")
spearman_501267edit <- cor(ranks_501267edit, method="spearman")
AP_pBV_SUCRAedit <- tauAP_b(ranks_501267edit[,"pBV ranks"],ranks_501267edit[,"SUCRA_ranks"],decreasing = F)
AP_pBV_ATEedit <- tauAP_b(ranks_501267edit[,"pBV ranks"],ranks_501267edit[,"AVG.TE_ranks"],decreasing = F)
AP_SUCRA_ATEedit <- tauAP_b(ranks_501267edit[,"SUCRA_ranks"],ranks_501267edit[,"AVG.TE_ranks"],decreasing=F)
AO_pBV_SUCRAedit <- averageoverlap(order(ranks_501267edit[,"pBV ranks"]),order(ranks_501267edit[,"SUCRA_ranks"]),4)
AO_pBV_ATEedit <- averageoverlap(order(ranks_501267edit[,"pBV ranks"]),order(ranks_501267edit[,"AVG.TE_ranks"]),4)
AO_SUCRA_ATEedit <- averageoverlap(order(ranks_501267edit[,"SUCRA_ranks"]),order(ranks_501267edit[,"AVG.TE_ranks"]),4)
matrix(data = round(c(spearman_501267edit[lower.tri(spearman_501267edit)], kendall_501267edit[lower.tri(kendall_501267edit)],
AP_pBV_SUCRAedit, AP_pBV_ATEedit, AP_SUCRA_ATEedit, AO_pBV_SUCRAedit, AO_pBV_ATEedit, AO_SUCRA_ATEedit), digits = 2),
nrow = 4, ncol = 3, byrow = T,
dimnames = list(c("Spearman rho", "Kendall tau", "Yilmaz tauAP", "Average Overlap"),
c("pBV vs SUCRA", "pBV vs ATE", "SUCRA vs ATE")))
