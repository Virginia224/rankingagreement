names(SUCRAvsSUCRAjags_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- Filter(Negate(anyNA), SUCRAvsSUCRAjags_AO)   ## exclude any NAs
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
SUCRAs_90 <- sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
SUCRAk_90 <- sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
SUCRAap_90 <-  sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
SUCRAao_90 <- sum(SUCRAvsSUCRAjags_AO>0.9)/length(SUCRAvsSUCRAjags_AO)# % of networks with AO >0.9
# export matrix results in table
write.xlsx(results, "agreement results.xlsx")
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
# create lists with only ranking metrics values for spearman correlation
# con_values <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
# bin_values <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
# calculate spearman correlation
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
# checks for P-score and SUCRA ranks
pSCOREvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["Pscore_ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["Pscore_ranks","SUCRA_ranks"]))
names(pSCOREvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
res_pSCOREvsSUCRA_s <- paste0(summary(pSCOREvsSUCRA_s, digits = 3)["Median"], " (", summary(pSCOREvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pSCOREvsSUCRA_s, digits = 3)["3rd Qu."], ")")
sum(pSCOREvsSUCRA_s<0.99)/length(res_pSCOREvsSUCRA_s) # % of networks with spearman correlation >0.9
print(pSCOREvsSUCRA_s[pSCOREvsSUCRA_s<1])
# prepare matrix to store results
results <- matrix(nrow = 4, ncol = 4,
dimnames = list(c("Spearman rho", "Kendall tau", "Yilmaz tauAP", "Average Overlap"),
c("pBV vs SUCRA", "SUCRA vs ATE", "pBV vs ATE", "SUCRA vs SUCRAjags")))
# save all pBV vs SUCRA in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"SUCRA_ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"SUCRA_ranks"], decreasing=F)))
names(pBVvsSUCRA_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(con_ranks[[i]][,"pBV ranks"]),order(con_ranks[[i]][,"SUCRA_ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(bin_ranks[[i]][,"pBV ranks"]),order(bin_ranks[[i]][,"SUCRA_ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- Filter(Negate(anyNA), pBVvsSUCRA_AO)   ## exclude any NAs
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
results["Spearman rho","pBV vs SUCRA"] <- paste0(summary(pBVvsSUCRA_s, digits = 2)["Median"], " (", summary(pBVvsSUCRA_s, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_k, digits = 2)["Median"], " (", summary(pBVvsSUCRA_k, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_AP, digits = 2)["Median"], " (", summary(pBVvsSUCRA_AP, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_AO, digits = 2)["Median"], " (", summary(pBVvsSUCRA_AO, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_AO, digits = 2)["3rd Qu."], ")")
# save all SUCRA vs Avg TE in a vector separately for kendall, spearman and AP, then store median and interquartile range
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(SUCRAvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(con_ranks[[i]][,"SUCRA_ranks"]),order(con_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(bin_ranks[[i]][,"SUCRA_ranks"]),order(bin_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- Filter(Negate(anyNA), SUCRAvsAvgTE_AO)   ## exclude any NAs
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
head(SUCRAvsAvgTE_AP)
head(SUCRAvsAvgTE_AO)
results["Spearman rho","SUCRA vs ATE"] <- paste0(summary(SUCRAvsAvgTE_s, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_s, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","SUCRA vs ATE"]  <- paste0(summary(SUCRAvsAvgTE_k, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs ATE"] <- paste0(summary(SUCRAvsAvgTE_AP, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_AP, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","SUCRA vs ATE"] <-paste0(summary(SUCRAvsAvgTE_AO, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_AO, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AO, digits = 2)["3rd Qu."], ")")
# save all pBV vs Avg TE in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(pBVvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(con_ranks[[i]][,"pBV ranks"]),order(con_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(bin_ranks[[i]][,"pBV ranks"]),order(bin_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- Filter(Negate(anyNA), pBVvsAvgTE_AO)   ## exclude any NAs
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_AP)
head(pBVvsAvgTE_AO)
results["Spearman rho","pBV vs ATE"] <- paste0(summary(pBVvsAvgTE_s, digits = 2)["Median"], " (", summary(pBVvsAvgTE_s, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","pBV vs ATE"]  <-paste0(summary(pBVvsAvgTE_k, digits = 2)["Median"], " (", summary(pBVvsAvgTE_k, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","pBV vs ATE"]  <-paste0(summary(pBVvsAvgTE_AP, digits = 2)["Median"], " (", summary(pBVvsAvgTE_AP, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","pBV vs ATE"] <-paste0(summary(pBVvsAvgTE_AO, digits = 2)["Median"], " (", summary(pBVvsAvgTE_AO, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_AO, digits = 2)["3rd Qu."], ")")
# save all SUCRA vs SUCRA jags in a vector separately for kendall and spearman, then store proportion of network with values >0.9
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)))
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(con_ranks[[i]][,"SUCRA_ranks"]),order(con_ranks[[i]][,"SUCRAjags ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(bin_ranks[[i]][,"SUCRA_ranks"]),order(bin_ranks[[i]][,"SUCRAjags ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsSUCRAjags_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- Filter(Negate(anyNA), SUCRAvsSUCRAjags_AO)   ## exclude any NAs
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
results["Spearman rho","SUCRA vs SUCRAjags"] <- paste0(summary(SUCRAvsSUCRAjags_s, digits = 2)["Median"], " (", summary(SUCRAvsSUCRAjags_s, digits = 2)["1st Qu."], ", ", summary(SUCRAvsSUCRAjags_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","SUCRA vs SUCRAjags"]  <- paste0(summary(SUCRAvsSUCRAjags_k, digits = 2)["Median"], " (", summary(SUCRAvsSUCRAjags_k, digits = 2)["1st Qu."], ", ", summary(SUCRAvsSUCRAjags_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs SUCRAjags"] <- paste0(summary(SUCRAvsSUCRAjags_AP, digits = 2)["Median"], " (", summary(SUCRAvsSUCRAjags_AP, digits = 2)["1st Qu."], ", ", summary(SUCRAvsSUCRAjags_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","SUCRA vs SUCRAjags"] <-paste0(summary(SUCRAvsSUCRAjags_AO, digits = 2)["Median"], " (", summary(SUCRAvsSUCRAjags_AO, digits = 2)["1st Qu."], ", ", summary(SUCRAvsSUCRAjags_AO, digits = 2)["3rd Qu."], ")")
SUCRAs_90 <- sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
SUCRAk_90 <- sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
SUCRAap_90 <-  sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
SUCRAao_90 <- sum(SUCRAvsSUCRAjags_AO>0.9)/length(SUCRAvsSUCRAjags_AO)# % of networks with AO >0.9
# export matrix results in table
write.xlsx(results, "agreement results.xlsx")
# export matrix results in table
write.xlsx(results, "agreement results.xlsx")
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
# store relative range of precision for Avg TE in each network in a vector
AvgTEprec_range <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec range"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec range"]))
# store average precision for Avg TE in each network in a vector
AvgTEprec_avg <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec avg"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec avg"]))
names(AvgTEprec_range) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_range)
names(AvgTEprec_avg) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_avg)
source("plots.R")
## NUMBER OF TREATMENTS IS INCORRECT IN DATABASE - MUST BE TAKEN FROM NETMETA RESULTS
finalDB <- nmadb[nmadb$Record.ID %in% binaryIDs | nmadb$Record.ID %in% continuousIDs,]
finalDB <- finalDB[,!grepl("Country..choice",colnames(finalDB))]
finalRM <- c(continuous_rm, binary_rm)
summary(as.numeric(sapply(1:length(finalRM), function(i) finalRM[[i]]["no. treatments"])))
summary(as.numeric(sapply(1:length(finalRM), function(i) finalRM[[i]]["no. studies"])))
summary(as.numeric(sapply(1:length(finalRM), function(i) finalRM[[i]]["sample size"])))
table(finalDB$Harmful.Beneficial.Outcome)
97/232
table(droplevels(finalDB$Type.of.Outcome.))
185/232
47/232
table(droplevels(finalDB$Year))
42/232
table(finalDB$Ranking.metric..choice.Probability.of.being.the.best.)
83/232
table(finalDB$Ranking.metric..choice.Rankograms.)
7/232
table(finalDB$Ranking.metric..choice.Median.rank.)
table(finalDB$Ranking.metric..choice.Mean.rank.)
3/232
table(finalDB$Ranking.metric..choice.SUCRA.)
16/232
table(finalDB$Ranking.metric..choice.P.score.)
table(finalDB$Ranking.metric..choice.Other.)
2/232
table(finalDB$Ranking.metric..choice.None.)
133/232
ext_prec_range <- AvgTEprec_range[log(log(1/as.numeric(AvgTEprec_range)))<=-4]
ext_prec_range_NMA <- lapply(names(ext_prec_range), function(id) {
pdf(file = paste('~/Virginia/PhD project/Project Presentation & documents/plots', id, 'extreme prec range.pdf'))
nma = runnetmeta(id)
netplot = netgraph(nma, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
return(list(id, summary(nma)))
dev.off()
}
)
graphics.off()
ext_prec_avg <- AvgTEprec_avg[log(as.numeric(AvgTEprec_avg))>3]
ext_prec_avg_NMA <- lapply(names(ext_prec_avg), function(id) {
pdf(file = paste('~/Virginia/PhD project/Project Presentation & documents/plots', id, 'extreme prec avg.pdf'))
nma = runnetmeta(id)
netplot = netgraph(nma, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
return(list(id, summary(nma)))
dev.off()
}
)
graphics.off()
ext_prec_range <- AvgTEprec_range[log(log(1/as.numeric(AvgTEprec_range)))<=-4]
ext_prec_range_NMA <- lapply(names(ext_prec_range), function(id) {
pdf(file = paste('~/Virginia/PhD project/Project Presentation & documents/example extreme precision values/plots', id, 'extreme prec range.pdf'))
nma = runnetmeta(id)
netplot = netgraph(nma, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
return(list(id, summary(nma)))
dev.off()
}
)
graphics.off()
ext_prec_avg <- AvgTEprec_avg[log(as.numeric(AvgTEprec_avg))>3]
ext_prec_avg_NMA <- lapply(names(ext_prec_avg), function(id) {
pdf(file = paste('~/Virginia/PhD project/Project Presentation & documents/example extreme precision values/plots', id, 'extreme prec avg.pdf'))
nma = runnetmeta(id)
netplot = netgraph(nma, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
return(list(id, summary(nma)))
dev.off()
}
)
graphics.off()
readByID(501267)
AvgTEprec_range["501267"]
log(log(1/as.numeric(AvgTEprec_range["501267"])))
trts501267 <- c("Placebo", "Conventional", "Diuretic", "Beta-Blocker", "ACE-inhibitor",
"Diuretic/Beta-block", "CCB", "Alpha-blocker", "ARB")
nma501267 <- runnetmeta(501267)
netgraph.netmeta(nma501267,labels = trts501267, cex = 2.5, plastic=F, thickness="number.of.studies", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, cex = 2, plastic=F, thickness="number.of.studies", multiarm = F, points=T, cex.points = 2.5, col=1)
trts501267 <- c("Placebo", "Conventional", "Diuretic", "Beta-Blocker", "ACE-inhibitor",
"Diuretic/Beta-blocker", "CCB", "Alpha-blocker", "ARB")
netgraph.netmeta(nma501267,labels = trts501267, cex = 2, plastic=F, thickness="number.of.studies", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, cex = 2, plastic=F, number.of.studies= T, thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
number.of.studies= T, cex.number.of.studies=.5,
thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
#number.of.studies= T, cex.number.of.studies=.5,
thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
#number.of.studies= T, cex.number.of.studies=.5,
thickness="number.of.studies", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
number.of.studies= T, cex.number.of.studies=.1,
thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
number.of.studies= T, cex.number.of.studies=1,
thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
number.of.studies= T, #cex.number.of.studies=1,
thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
number.of.studies= T, bg.number.of.studies=F,
thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
number.of.studies= T, bg.number.of.studies=T,
thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
number.of.studies= T, bg.number.of.studies="white",
thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
number.of.studies= T, col.number.of.studies="white",
thickness="se.random", multiarm = F, points=T, cex.points = 2.5, col=1)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
thickness="se.random", multiarm = F,
points=T, cex.points = 2.5, col=1)
binary_rm["501267"]
ranks_501267 <- binary_rm$`501267`$`ranking metrics`[,c("pBV ranks", "SUCRA_ranks", "Avg TE ranks")]
write.xlsx(ranks_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Project Presentation & documents/example extreme precision values/ranks_501267.xlsx')
View(ranks_501267)
names(ranks_501267[,c("pBV ranks", "SUCRA_ranks", "Avg TE ranks")]) <- trts501267
View(ranks_501267)
trts501267
write.xlsx(ranks_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Project Presentation & documents/example extreme precision values/ranks_501267.xlsx')
write.xlsx(ranks_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Project Presentation & documents/example extreme precision values/ranks_501267.xlsx')
names(ranks_501267[,c(1,2,3)]) <- trts501267
View(ranks_501267)
names(ranks_501267) <- trts501267
View(ranks_501267)
write.xlsx(ranks_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Project Presentation & documents/example extreme precision values/ranks_501267.xlsx')
trts501267
readByID(501267)
AvgTEprec_range["501267"]
log(log(1/as.numeric(AvgTEprec_range["501267"])))
trts501267 <- c("Placebo", "Conventional", "Diuretic", "Beta-Blocker", "ACE-inhibitor",
"Diuretic/Beta-blocker", "CCB", "Alpha-blocker", "ARB")
nma501267 <- runnetmeta(501267)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
thickness="se.random", multiarm = F,
points=T, cex.points = 2.5, col=1)
binary_rm["501267"]
ranks_501267 <- binary_rm$`501267`$`ranking metrics`[,c("pBV ranks", "SUCRA_ranks", "Avg TE ranks")]
write.xlsx(ranks_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Project Presentation & documents/example extreme precision values/ranks_501267.xlsx')
binary_rm$`501267`$`ranking metrics`
rownames(ranks_501267) <- trts501267
View(ranks_501267)
write.xlsx(ranks_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Project Presentation & documents/example extreme precision values/ranks_501267.xlsx')
write.xlsx(ranks_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Project Presentation & documents/example extreme precision values/ranks_501267.xlsx')
agreement_501267 <- matrix(data = round(c(pBVvsSUCRA_s["501267"], pBVvsSUCRA_k["501267"], pBVvsSUCRA_AP["501267"], pBVvsSUCRA_AO["501267"],
SUCRAvsAvgTE_s["501267"], SUCRAvsAvgTE_k["501267"], SUCRAvsAvgTE_AP["501267"], SUCRAvsAvgTE_AO["501267"],
pBVvsAvgTE_s["501267"], pBVvsAvgTE_k["501267"], pBVvsAvgTE_AP["501267"], pBVvsAvgTE_AO["501267"]), digits = 2),
nrow = 4, ncol = 3,
dimnames = list(c("Spearman rho", "Kendall tau", "Yilmaz tauAP", "Average Overlap"),
c("pBV vs SUCRA", "SUCRA vs ATE", "pBV vs ATE")))
write.xlsx(agreement_501267, 'C:/Users/vc18e501/Documents/Virginia/PhD project/Project Presentation & documents/example extreme precision values/agreement_501267.xlsx')
forest(nma501267, ref = "Placebo")
forest(nma501267, ref = "1")
forest(nma501267, ref = "1", sortvar = "Pscore", labels = trts501267)
forest(nma501267, ref = "1", sortvar = "-Pscore", labels = trts501267)
netgraph.netmeta(nma501267,labels = trts501267, plastic=F,
thickness="se.random", multiarm = F,
points=T, cex.points = 2.5, col=1)
forest(nma501267, ref = "1", sortvar = "-Pscore", labels = trts501267)
sum(SUCRAvsSUCRAjags_s>0.9)
sum(SUCRAvsSUCRAjags_s<0.9)
84/232
library(splines)
# plots of relative range precision and correlations
pdf('~/Virginia/PhD project/Project Presentation & documents/plots_prec_range_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,4,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(-0.7,1))         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(-0.7,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(-0.7,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(-0.7,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(-0.7,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(-0.7,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
# plots of average precision and correlations
pdf('~/Virginia/PhD project/Project Presentation & documents/plots_prec_avg_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,4,1,1) + 0.1)
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, ylim=c(-0.7,1))         # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, ylim=c(-0.7,1))   # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, ylim=c(-0.7,1))     # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])), pBVvsSUCRA_AO,
ylim=c(-0.7,1))         # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])), SUCRAvsAvgTE_AO,
ylim=c(-0.7,1))   # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])), pBVvsAvgTE_AO,
ylim=c(-0.7,1))    # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
### Plots for presentation
library(splines)
# plots of relative range precision and correlations
pdf('~/Virginia/PhD project/Project Presentation & documents/plots_prec_range_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,4,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(-0.7,1))         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(-0.7,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(-0.7,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(-0.7,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 4),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(-0.7,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 4),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(-0.7,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 4),lwd=2,col="purple")
dev.off()
pdf('~/Virginia/PhD project/Project Presentation & documents/plots_prec_range_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(4,4,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(-0.7,1))         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(-0.7,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(-0.7,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(-0.7,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(-0.7,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(-0.7,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
pdf('~/Virginia/PhD project/Project Presentation & documents/plots_prec_range_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,2,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(-0.7,1))         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(-0.7,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(-0.7,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(-0.7,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(-0.7,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(-0.7,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
table(droplevels(finalDB$Journal.Name))
library(splines)
# plots of relative range precision and correlations
pdf('~/Virginia/PhD project/Project Presentation & documents/plots_prec_range_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,2,1,1) + 0.1)
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, ylim=c(-0.7,1))         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, ylim=c(-0.7,1))   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, ylim=c(-0.7,1))     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
ylim=c(-0.7,1))         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
ylim=c(-0.7,1))   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
ylim=c(-0.7,1))     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
# plots of average precision and correlations
pdf('~/Virginia/PhD project/Project Presentation & documents/plots_prec_avg_P.pdf')
par(mfrow=c(2,3),
oma = c(1,1,0,0) + 0.1,
mar = c(1.5,2,1,1) + 0.1)
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, ylim=c(-0.7,1))         # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, ylim=c(-0.7,1))   # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, ylim=c(-0.7,1))     # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])), pBVvsSUCRA_AO,
ylim=c(-0.7,1))         # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])), SUCRAvsAvgTE_AO,
ylim=c(-0.7,1))   # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])), pBVvsAvgTE_AO,
ylim=c(-0.7,1))    # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
