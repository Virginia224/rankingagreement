"ranking metrics"=cbind(nmaranks,jagsranks#,
# "Avg TE"=altnma$averages[order(rownames(altnma$averages))]$TE,
# "Avg TE ranks"=altnma$averages[order(rownames(altnma$averages))]$TE_ranks,
# "Avg Pscore"=altnma$averages[order(rownames(altnma$averages))]$Pscoreaverage
),
"Avg TE prec range"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
return(out)
}
# continuous_rm = loadOrRun("continuousRM.RData",
#                   function () {
#                     conts = getContinuous()
#                     saveRDS(file = "./continuousRM.RData", object = conts)
#                     return(conts)}
# )
pdf("traceplots_cont.pdf")
continuous_rm =  getContinuous()
dev.off()
View(continuous_rm)
alternativenma(continuousNetObjects[[3]]$netobj)
alternativenma(continuousNetObjects[[3]]$netobj)$averages[order(rownames(alternativenma(continuousNetObjects[[3]]$netobj)$averages))]$TE
getContinuous = function () {
out = lapply( 1:length(continuousNetObjects),
function(i) {
tryCatch({
nma = continuousNetObjects[[i]]$netobj
rid = continuousNetObjects[[i]]$rid
netd = continuousDatasets[[i]]
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages[order(rownames(altnma$averages)),]$TE,
"Avg TE ranks"=altnma$averages[order(rownames(altnma$averages)),]$TE_ranks,
"Avg Pscore"=altnma$averages[order(rownames(altnma$averages)),]$Pscoreaverage),
"Avg TE prec range"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
return(out)
}
# continuous_rm = loadOrRun("continuousRM.RData",
#                   function () {
#                     conts = getContinuous()
#                     saveRDS(file = "./continuousRM.RData", object = conts)
#                     return(conts)}
# )
pdf("traceplots_cont.pdf")
continuous_rm =  getContinuous()
dev.off()
continuous_rm[1]
continuous_rm[3]
View(continuousDatasets)
View(continuousDatasets[[2]][["data"]])
nmadb[nmadb$Record.ID==479629,]$Harmful.Beneficial.Outcome
nmadb[nmadb$Record.ID==479622,]$Harmful.Beneficial.Outcome
nmadb[nmadb$Record.ID==479652,]$Harmful.Beneficial.Outcome
nmadb[nmadb$Record.ID==479816,]$Harmful.Beneficial.Outcome
nmadb[nmadb$Record.ID==479993,]$Harmful.Beneficial.Outcome
nmadb[nmadb$Record.ID==480039,]$Harmful.Beneficial.Outcome
nmadb[nmadb$Record.ID==480612,]$Harmful.Beneficial.Outcome
View(nmadb)
nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",c(nmadb$Record.ID, nmadb$Harmful.Beneficial.Outcome]
nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",c(nmadb$Record.ID, nmadb$Harmful.Beneficial.Outcome)]
nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",c(Record.ID,Harmful.Beneficial.Outcome)]
nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Harmful.Beneficial.Outcome
continuous_rm[4]
View(continuous_rm)
View(continuousNetObjects)
nma <- continuousNetObjects[[4]]$netobj
rte <- nma$TE.random   ## relative treatment effects (already in logOR)
rte.v <- t(rte)[lower.tri(rte)] ## save relative treatment effects in a vector
## simulates relative treatment effects from multinormal distribution
library(mvtnorm)
nma.mvnorm <- rmvnorm(nsim, rte.v, nma$Cov.random)  ## 1000 simulation of the relative treatment effects from multivariate normal
rte <- nma$TE.random   ## relative treatment effects (already in logOR)
rte.v <- t(rte)[lower.tri(rte)] ## save relative treatment effects in a vector
nma.mvnorm <- rmvnorm(1000, rte.v, nma$Cov.random)  ## 1000 simulation of the relative treatment effects from multivariate normal
nma.mvnorm.m <- array(NA,c(nrow(rte),ncol(rte),nrow(nma.mvnorm)),dimnames = list(rownames(rte), colnames(rte), 1:1000))
summary(nma)
for (i in 1:nrow(nma.mvnorm)) {
nma.mvnorm.m[,,i][lower.tri(nma.mvnorm.m[,,i])] <- nma.mvnorm[i,]
nma.mvnorm.m[,,i] <- t(nma.mvnorm.m[,,i])
nma.mvnorm.m[,,i][lower.tri(nma.mvnorm.m[,,i])] <- -nma.mvnorm[i,]
}
## then calculate the treatment ranking in each simulation (matrix) - do this by counting the signs
rankings <- matrix(NA, nrow(nma.mvnorm), ncol(rte), dimnames = list(1:nrow(nma.mvnorm), colnames(rte)))
for (i in 1:nsim) {
rankings[i,] <- rank(rowSums(nma.mvnorm.m[,,i] > 0, na.rm = T))
}
rankings <- matrix(NA, nrow(nma.mvnorm), ncol(rte), dimnames = list(1:nrow(nma.mvnorm), colnames(rte)))
for (i in 1:1000) {
rankings[i,] <- rank(rowSums(nma.mvnorm.m[,,i] > 0, na.rm = T))
}
## then calculate the probabilities for each treatment to rank at a particular position and store them in matrix p.rank
p.rank=matrix(,nrow(rte),ncol(rte),dimnames = list(rownames(rte), 1:nma$n))
rownames(rte)
order(rownames(rte))
for (i in 1:nrow(p.rank)) {
for (j in 1:ncol(p.rank)) {
p.rank[i,j] <- sum(rankings[,i]==j)/1000
}
}
p.rank_1st <- c()
for (i in 1:nrow(p.rank)) {
p.rank_1st[i]=p.rank[i,1]
}
p.rank_1st
p1st_rankings=(nrow(p.rank) + 1) - rank(p.rank_1st)
p.rank.cum=matrix(,nrow(p.rank),ncol(p.rank),dimnames = list(rownames(p.rank), 1:nma$n))
for (i in 1:nrow(p.rank)) {
p.rank.cum[i,] <- cumsum(p.rank[i,])
}
SUCRA <- vector(, length = nrow(p.rank))
names(SUCRA) <- rownames(p.rank)
for (i in 1:nrow(p.rank.cum)) {
SUCRA[i] <- round(sum(p.rank.cum[i,-length(p.rank.cum[i,])])/(nrow(p.rank.cum)-1), digits = 5)
}
#create vector of rankings based on SUCRA
SUCRA_ranks=(nrow(p.rank) + 1) - rank(SUCRA)
mean.rank <- colMeans(rankings)
#mean.rank.S <- nma$n - (nma$n - 1)*SUCRA ## check mean ranks are transformation of SUCRAs
#cbind(mean.rank, mean.rank.S)
## calculate median rank
med.rank<- structure(rep(NA, length=nma$n), names = colnames(rankings))
for (i in 1:nrow(p.rank)) {
med.rank[i] <- median(rankings[,i])
##calculate vector of rankings based on P-score
Pscore_ranks=(nrow(p.rank) + 1) - rank(netrank(nma)$Pscore.random)
}
cbind("pBV"=p.rank_1st, "pBV ranks"=p1st_rankings, SUCRA, SUCRA_ranks, "P-score"=netrank(nma)$Pscore.random, Pscore_ranks, "Mean rank"=mean.rank, "Median rank"=med.rank)
cbind(p.rank_1st, p1st_rankings, SUCRA, SUCRA_ranks, netrank(nma)$Pscore.random, Pscore_ranks, mean.rank, med.rank)
Pscore_ranks
order(rownames(cbind(p.rank_1st, p1st_rankings, SUCRA, SUCRA_ranks, netrank(nma)$Pscore.random, Pscore_ranks, mean.rank, med.rank)))
nmaranks <- cbind("pBV"=p.rank_1st, "pBV ranks"=p1st_rankings, SUCRA, SUCRA_ranks, "P-score"=netrank(nma)$Pscore.random, Pscore_ranks, "Mean rank"=mean.rank, "Median rank"=med.rank)
order(nmaranks)
order(rownames(nmaranks))
nmaranks[order(rownames(nmaranks))]
nmaranks[order(rownames(nmaranks)),]
nmaranks
nmaranks[sort(rownames(nmaranks)),]
nmaranks[order(as.character(rownames(nmaranks))),]
order(as.character(rownames(nmaranks)))
order(rownames(nmaranks))
nmaranks[1,]
nmaranks[10,]
nmaranks["10",]
nmaranks[order(as.numeric(rownames(nmaranks))),]
data <- continuousDatasets[[4]]$data
#transform the data into a list suitable for JAGS analysis
NMAdataContinuous=make.jagsNMA.data(studyid=id, t=t,
y=y, sd=sd, n=n,
data=netdata, type="cont", reference = min(netdata$t))
netdata <- continuousDatasets[[4]]$data
#transform the data into a list suitable for JAGS analysis
NMAdataContinuous=make.jagsNMA.data(studyid=id, t=t,
y=y, sd=sd, n=n,
data=netdata, type="cont", reference = min(netdata$t))
#run Jags and create a jags object
NMAinJAGS<- jags.parallel(data = NMAdataContinuous, inits = NULL,
parameters.to.save = c("SMD","tau", "SUCRA"),
n.chains = 2, n.iter = 10000,
n.burnin = 1000,DIC=F, n.thin=2,
model.file = modelNMAContinuous)
SUCRAjags_ranks <- (NMAdataContinuous$nt+1) - rank(NMAinJAGS$BUGSoutput$mean$SUCRA)
SUCRAjags <- NMAinJAGS$BUGSoutput$mean$SUCRA
cbind("SUCRA jags"= SUCRAjags, "SUCRAjags ranks" = SUCRAjags_ranks)
cbind(nmaranks[order(as.numeric(rownames(nmaranks))),],
jagsranks)
cbind(nmaranks[order(as.numeric(rownames(nmaranks))),],
SUCRAjags, SUCRAjags_ranks)
NMAinJAGS$BUGSoutput$mean
NMAdataContinuous
View(netdata)
alternativenma(nma)
altnma = alternativenma(nma)
altnma$averages[order(rownames(altnma$averages)),]
altnma$averages[order(as.numeric(rownames(altnma$averages))),]
cbind(nmaranks[order(as.numeric(rownames(nmaranks))),],
jagsranks,altnma$averages[order(rownames(altnma$averages)),]$TE)
cbind(nmaranks[order(as.numeric(rownames(nmaranks))),],
SUCRAjags, SUCRAjags_ranks,altnma$averages[order(rownames(altnma$averages)),]$TE)
cbind(nmaranks[order(as.numeric(rownames(nmaranks))),-(7:8)],
SUCRAjags, SUCRAjags_ranks,altnma$averages[order(rownames(altnma$averages)),]$TE,altnma$averages[order(rownames(altnma$averages)),]$TE_ranks,altnma$averages[order(rownames(altnma$averages)),]$Pscoreaverage)
altnma$averages[order(rownames(altnma$averages)),]
cbind(nmaranks[order(as.numeric(rownames(nmaranks))),-(7:8)],
SUCRAjags, SUCRAjags_ranks,altnma$averages[order(as.numeric(rownames(altnma$averages))),]$TE,altnma$averages[order(as.numeric(rownames(altnma$averages))),]$TE_ranks,altnma$averages[order(as.numeric(rownames(altnma$averages))),]$Pscoreaverage)
altnma$averages[order(as.numeric(rownames(altnma$averages))),]
getContinuous = function () {
out = lapply( 1:length(continuousNetObjects),
function(i) {
tryCatch({
nma = continuousNetObjects[[i]]$netobj
rid = continuousNetObjects[[i]]$rid
netd = continuousDatasets[[i]]
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks[order(as.numeric(rownames(nmaranks))),],
jagsranks, "Avg TE"=altnma$averages[order(as.numeric(rownames(altnma$averages))),]$TE,
"Avg TE ranks"=altnma$averages[order(as.numeric(rownames(altnma$averages))),]$TE_ranks,
"Avg Pscore"=altnma$averages[order(as.numeric(rownames(altnma$averages))),]$Pscoreaverage),
"Avg TE prec range"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
return(out)
}
pdf("traceplots_cont.pdf")
continuous_rm =  getContinuous()
dev.off()
View(continuous_rm)
continuous_rm[47]
continuous_rm[46]
continuous_rm[37]
continuous_rm[33]
continuous_rm[33]
continuous_rm[32]
names(continuous_rm) <- as.character(continuousIDs)
head(continuous_rm)
getBinaryNMAs = function() {
out = lapply(binaryIDs,
function(rid)
return(list(rid=rid,netobj=runnetmeta(rid)))
)
return(out)
}
binaryNetObjects = loadOrRun("binaryNetObjects.RData",
function () {
nmas = getBinaryNMAs()
saveRDS(file = "./binaryNetObjects.RData", object = nmas)
return(nmas)}
)
getBinarysDatasets = function() {
out = lapply(binaryIDs,
function(rid)
return(readByID(rid))
)
return(out)
}
binaryDatasets = loadOrRun("binaryDatasets.RData",
function () {
datas = getBinaryDatasets()
saveRDS(file = "./binaryDatasets.RData", object = datas)
return(datas)}
)
getBinaryDatasets = function() {
out = lapply(binaryIDs,
function(rid)
return(readByID(rid))
)
return(out)
}
binaryDatasets = loadOrRun("binaryDatasets.RData",
function () {
datas = getBinaryDatasets()
saveRDS(file = "./binaryDatasets.RData", object = datas)
return(datas)}
)
View(binaryNetObjects)
View(binaryDatasets)
nmajagsranks_bin
make.jagsNMA.data
nmaranks[order(as.numeric(rownames(nmaranks)))
]
order(as.numeric(rownames(nmaranks)))
rownames(nmaranks)
as.numeric(rownames(nmaranks))
nmaranks[order(as.numeric(rownames(nmaranks))),]
nmaranks[order(rownames(nmaranks)),]
nmaranks
as.factor(rownames(nmaranks))
order(as.factor(rownames(nmaranks)))
order(as.numeric(rownames(nmaranks)))
nmaranks[order(as.numeric(rownames(nmaranks))),]
nmaranks[order(as.factor(rownames(nmaranks))),]
as.factor(rownames(nmaranks))
as.numeric(as.factor(rownames(nmaranks)))
# calculate ranking metrics for binary outcome networks
getBinary = function () {
out  = lapply( 1:length(binaryNetObjects),
function(rid) {
tryCatch({
nma = binaryNetObjects[[i]]$netobj
rid = binaryNetObjects[[i]]$rid
netd = binaryDatasets[[i]]
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks[order(as.numeric(rownames(nmaranks))),],
jagsranks, "Avg TE"=altnma$averages[order(as.numeric(rownames(altnma$averages))),]$TE,
"Avg TE ranks"=altnma$averages[order(as.numeric(rownames(altnma$averages))),]$TE_ranks,
"Avg Pscore"=altnma$averages[order(as.numeric(rownames(altnma$averages))),]$Pscoreaverage),
"Avg TE prec range"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))                     },   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
}
pdf("traceplots_bin.pdf")
binary_rm =  getBinary()
dev.off()
View(binary_rm)
names(binary_rm) <- as.character(binaryIDs)
head(binary_rm)
# create lists with only ranks for kendall correlation
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
# calculate spearman correlation
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
pSCOREvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["Pscore_ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["Pscore_ranks","SUCRA_ranks"]))
names(pSCOREvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
res_pSCOREvsSUCRA_s <- paste0(summary(pSCOREvsSUCRA_s, digits = 3)["Median"], " (", summary(pSCOREvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pSCOREvsSUCRA_s, digits = 3)["3rd Qu."], ")")
sum(pSCOREvsSUCRA_s<0.99)/length(res_pSCOREvsSUCRA_s) # % of networks with spearman correlation >0.9
print(pSCOREvsSUCRA_s[pSCOREvsSUCRA_s<1])
sum(pSCOREvsSUCRA_>0.99)/length(pSCOREvsSUCRA) # % of networks with spearman correlation >0.9
sum(pSCOREvsSUCRA_s>0.99)/length(pSCOREvsSUCRA_s) # % of networks with spearman correlation >0.9
sum(pSCOREvsSUCRA_s>0.9)/length(pSCOREvsSUCRA_s) # % of networks with spearman correlation >0.9
print(pSCOREvsSUCRA_s[pSCOREvsSUCRA_s<1])
print(pSCOREvsSUCRA_s[pSCOREvsSUCRA_s<1.000])
print(pSCOREvsSUCRA_s[pSCOREvsSUCRA_s<0.99999])
results <- matrix(nrow = 4, ncol = 4,
dimnames = list(c("Spearman rho", "Kendall tau", "Yilmaz tauAP", "Average Overlap"),
c("pBV vs SUCRA", "SUCRA vs ATE", "pBV vs ATE", "SUCRA vs SUCRAjags")))
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"SUCRA_ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"SUCRA_ranks"], decreasing=F)))
names(pBVvsSUCRA_AP) <- as.character(c(continuousIDs,binaryIDs))
con_ranks[[1]][,"pBV ranks"]
con_ranks[[2]][,"pBV ranks"]
con_ranks[[3]][,"pBV ranks"]
con_ranks[[4]][,"pBV ranks"]
con_ranks[[5]][,"pBV ranks"]
con_ranks[[6]][,"pBV ranks"]
order(con_ranks[[7]][,"pBV ranks"]
)
order(con_ranks[[6]][,"pBV ranks"]
)
order(con_ranks[[6]][,"SUCRA_ranks"])
con_ranks[[6]][,"SUCRA_ranks"]
con_ranks[[6]][,"Avg TE ranks"]
order(con_ranks[[6]][,"Avg TE ranks"])
pBVvsSUCRA_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(con_ranks[[i]][,"pBV ranks"]),order(con_ranks[[i]][,"SUCRA_ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(bin_ranks[[i]][,"pBV ranks"]),order(bin_ranks[[i]][,"SUCRA_ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- Filter(Negate(anyNA), pBVvsSUCRA_AO)   ## exclude any NAs
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
results["Spearman rho","pBV vs SUCRA"] <- paste0(summary(pBVvsSUCRA_s, digits = 2)["Median"], " (", summary(pBVvsSUCRA_s, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_k, digits = 2)["Median"], " (", summary(pBVvsSUCRA_k, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_AP, digits = 2)["Median"], " (", summary(pBVvsSUCRA_AP, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","pBV vs SUCRA"] <-paste0(summary(pBVvsSUCRA_AO, digits = 2)["Median"], " (", summary(pBVvsSUCRA_AO, digits = 2)["1st Qu."], ", ", summary(pBVvsSUCRA_AO, digits = 2)["3rd Qu."], ")")
# save all SUCRA vs Avg TE in a vector separately for kendall, spearman and AP, then store median and interquartile range
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(SUCRAvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(con_ranks[[i]][,"SUCRA_ranks"]),order(con_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(bin_ranks[[i]][,"SUCRA_ranks"]),order(bin_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- Filter(Negate(anyNA), SUCRAvsAvgTE_AO)   ## exclude any NAs
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
head(SUCRAvsAvgTE_AP)
head(SUCRAvsAvgTE_AO)
results["Spearman rho","SUCRA vs ATE"] <- paste0(summary(SUCRAvsAvgTE_s, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_s, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","SUCRA vs ATE"]  <- paste0(summary(SUCRAvsAvgTE_k, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs ATE"] <- paste0(summary(SUCRAvsAvgTE_AP, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_AP, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","SUCRA vs ATE"] <-paste0(summary(SUCRAvsAvgTE_AO, digits = 2)["Median"], " (", summary(SUCRAvsAvgTE_AO, digits = 2)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AO, digits = 2)["3rd Qu."], ")")
# save all pBV vs Avg TE in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(pBVvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(con_ranks[[i]][,"pBV ranks"]),order(con_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(bin_ranks[[i]][,"pBV ranks"]),order(bin_ranks[[i]][,"Avg TE ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- Filter(Negate(anyNA), pBVvsAvgTE_AO)   ## exclude any NAs
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_AP)
head(pBVvsAvgTE_AO)
results["Spearman rho","pBV vs ATE"] <- paste0(summary(pBVvsAvgTE_s, digits = 2)["Median"], " (", summary(pBVvsAvgTE_s, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","pBV vs ATE"]  <-paste0(summary(pBVvsAvgTE_k, digits = 2)["Median"], " (", summary(pBVvsAvgTE_k, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","pBV vs ATE"]  <-paste0(summary(pBVvsAvgTE_AP, digits = 2)["Median"], " (", summary(pBVvsAvgTE_AP, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","pBV vs ATE"] <-paste0(summary(pBVvsAvgTE_AO, digits = 2)["Median"], " (", summary(pBVvsAvgTE_AO, digits = 2)["1st Qu."], ", ", summary(pBVvsAvgTE_AO, digits = 2)["3rd Qu."], ")")
# save all SUCRA vs SUCRA jags in a vector separately for kendall and spearman, then store proportion of network with values >0.9
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)))
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(con_ranks[[i]][,"SUCRA_ranks"]),order(con_ranks[[i]][,"SUCRAjags ranks"]),floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(order(bin_ranks[[i]][,"SUCRA_ranks"]),order(bin_ranks[[i]][,"SUCRAjags ranks"]),floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsSUCRAjags_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- Filter(Negate(anyNA), SUCRAvsSUCRAjags_AO)   ## exclude any NAs
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
results["Spearman rho","SUCRA vs SUCRAjags"] <- paste0(summary(SUCRAvsSUCRAjags_s, digits = 2)["Median"], " (", summary(SUCRAvsSUCRAjags_s, digits = 2)["1st Qu."], ", ", summary(SUCRAvsSUCRAjags_s, digits = 2)["3rd Qu."], ")")
results["Kendall tau","SUCRA vs SUCRAjags"]  <- paste0(summary(SUCRAvsSUCRAjags_k, digits = 2)["Median"], " (", summary(SUCRAvsSUCRAjags_k, digits = 2)["1st Qu."], ", ", summary(SUCRAvsSUCRAjags_k, digits = 2)["3rd Qu."], ")")
results["Yilmaz tauAP","SUCRA vs SUCRAjags"] <- paste0(summary(SUCRAvsSUCRAjags_AP, digits = 2)["Median"], " (", summary(SUCRAvsSUCRAjags_AP, digits = 2)["1st Qu."], ", ", summary(SUCRAvsSUCRAjags_AP, digits = 2)["3rd Qu."], ")")
results["Average Overlap","SUCRA vs SUCRAjags"] <-paste0(summary(SUCRAvsSUCRAjags_AO, digits = 2)["Median"], " (", summary(SUCRAvsSUCRAjags_AO, digits = 2)["1st Qu."], ", ", summary(SUCRAvsSUCRAjags_AO, digits = 2)["3rd Qu."], ")")
SUCRAs_90 <- sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
SUCRAk_90 <- sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
SUCRAap_90 <-  sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
SUCRAao_90 <- sum(SUCRAvsSUCRAjags_AO>0.9)/length(SUCRAvsSUCRAjags_AO)# % of networks with AO >0.9
write.xlsx(results, "agreement results.xlsx")
con_ranks[[6]][,"SUCRAjags ranks"]
con_ranks[[6]][,"SUCRA_ranks"]
View(continuousDatasets)
View(continuousDatasets[[6]][["data"]])
nmadb[nmadb$Record.ID==480039,]$Harmful.Beneficial.Outcome
View(continuousDatasets[[6]][["data"]])
