par(mfrow=c(2,4))
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_k,
xlab = "log of average precision",
ylab = "Kendall tau SUCRA vs average treatment effect")   # kendall correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_k, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s,
xlab = "log of average precision",
ylab = "Spearman rho SUCRA vs average treatment effect")   # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_k,
xlab = "log of average precision",
ylab = "Kendall tau pBV vs average treatment effect")     # kendall correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_k, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s,
xlab = "log of average precision",
ylab = "Spearman rho pBV vs average treatment effect")     # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_k,
xlab = "log of average precision",
ylab = "Kendall tau pBV vs SUCRA")         # kendall correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_k, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s,
xlab = "log of average precision",
ylab = "Spearman rho pBV vs SUCRA")         # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_k,
xlab = "log of average precision",
ylab = "Kendall tau SUCRA vs Bayesian SUCRA")   # kendall correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_k, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_s,
xlab = "log of average precision",
ylab = "Spearman rho SUCRA vs Bayesian SUCRA")   # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_s, df = 3),lwd=2,col="purple")
dev.off()
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source("plots.R")
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
View(nmadb)
binaryIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Binary" & nmadb$Format!="iv",]$Record.ID
continuousIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Record.ID
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv",]
unique(nmadb$Type.of.Outcome.)
table(nmadb_used$Type.of.Outcome.)
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous",]
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
View(nmadb_used)
View(nmadb_used)
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
# nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
# get IDs of networks separately for binary and continuous outcome; those with inverse-variance excluded
binaryIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Binary" & nmadb$Format!="iv",]$Record.ID
continuousIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Record.ID
# calculate ranking metrics for continuous outcome networks
continuous_rm = lapply(continuousIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(continuous_rm) <- as.character(continuousIDs)
head(continuous_rm)
# calculate ranking metrics for binary outcome networks
binary_rm = lapply(binaryIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
head(binary_rm)
# create lists with only ranks for kendall correlation
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
# create lists with only ranking metrics values for spearman correlation
# con_values <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
# bin_values <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
# calculate spearman correlation
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
# calculate average overlap
AO_con <- lapply(con_ranks, averageoverlap(con_ranks[[,i]],con_ranks[[,j]]), 3)
# Average Overlap
averageoverlap <- function(x, y, k) {
Ad <- sapply(1:k, function(i) length(intersect(x[1:i], y[1:i])))/seq(1,k)
AO <- cumsum(Ad)/seq(1,k)
return(AO)
}
# calculate average overlap
AO_con <- lapply(con_ranks, averageoverlap(con_ranks[[,i]],con_ranks[[,j]]), 3)
# calculate average overlap
AO_con <- lapply(con_ranks, averageoverlap(con_ranks[[,i]],con_ranks[[,j]],3))
# calculate average overlap
AO_con <- lapply(con_ranks, averageoverlap(con_ranks[[,"pBV ranks"]],con_ranks[[,"SUCRA_ranks"]],3))
# calculate average overlap
AO_con <- lapply(con_ranks, averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],3))
# calculate average overlap
AO_con <- lapply(1:length(con_ranks), averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],3))
# calculate average overlap
AO_con <- lapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],3))
pBVvsSUCRA_AO <- c(sapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],3)),
sapply(1:length(bin_ranks), function(i) averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],3)))
# save all pBV vs SUCRA in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"SUCRA_ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"SUCRA_ranks"], decreasing=F)))
names(pBVvsSUCRA_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- c(sapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],3)),
sapply(1:length(bin_ranks), function(i) averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],3)))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
res_pBVvsSUCRA_s <- paste0(summary(pBVvsSUCRA_s, digits = 3)["Median"], " (", summary(pBVvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_k <-paste0(summary(pBVvsSUCRA_k, digits = 3)["Median"], " (", summary(pBVvsSUCRA_k, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_AP <-paste0(summary(pBVvsSUCRA_AP, digits = 3)["Median"], " (", summary(pBVvsSUCRA_AP, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AP, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_AO <-paste0(summary(pBVvsSUCRA_AO, digits = 3)["Median"], " (", summary(pBVvsSUCRA_AO, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AO, digits = 3)["3rd Qu."], ")")
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],3)),
lapply(1:length(bin_ranks), function(i) averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],3)))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsSUCRA_AO)
res_pBVvsSUCRA_AO <-paste0(summary(pBVvsSUCRA_AO[,3], digits = 3)["Median"], " (", summary(pBVvsSUCRA_AO[,3], digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AO[,3], digits = 3)["3rd Qu."], ")")
pBVvsSUCRA_AO[1,3]
pBVvsSUCRA_AO[[1,3]]
pBVvsSUCRA_AO[[1,]]
pBVvsSUCRA_AO[[1]]
pBVvsSUCRA_AO[[1]][3]
pBVvsSUCRA_AO[[2]][3]
res_pBVvsSUCRA_AO <-paste0(summary(pBVvsSUCRA_AO[[]][3], digits = 3)["Median"], " (", summary(pBVvsSUCRA_AO[[]][3], digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AO[[]][3], digits = 3)["3rd Qu."], ")")
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
# nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
# get IDs of networks separately for binary and continuous outcome; those with inverse-variance excluded
binaryIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Binary" & nmadb$Format!="iv",]$Record.ID
continuousIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Record.ID
# calculate ranking metrics for continuous outcome networks
continuous_rm = lapply(continuousIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(continuous_rm) <- as.character(continuousIDs)
head(continuous_rm)
# calculate ranking metrics for binary outcome networks
binary_rm = lapply(binaryIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec var"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
head(binary_rm)
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
# calculate spearman correlation
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
# Average Overlap
averageoverlap <- function(x, y, k) {
Ad <- sapply(1:k, function(i) length(intersect(x[1:i], y[1:i])))/seq(1,k)
AO <- cumsum(Ad)/seq(1,k)
return(AO)
}
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"SUCRA_ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"SUCRA_ranks"], decreasing=F)))
names(pBVvsSUCRA_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],3)),
lapply(1:length(bin_ranks), function(i) averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],3)))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
floor(5.5)
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
ntreat/2
as.numeric(ntreat)/2
floor(as.numeric(ntreat)/2)
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(ntreat)/2))),
lapply(1:length(bin_ranks), function(i) averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(ntreat)/2))))
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(ntreat)/2))),
lapply(1:length(bin_ranks), function(i) averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(ntreat)/2))))
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(ntreat)/2))),
lapply(1:length(bin_ranks), function(i) averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(ntreat)/2))))
continuous_rm[[13]]["no. treatments"]
continuous_rm[[13]]["no. treatments"]/2
(continuous_rm[[13]]["no. treatments"])/2
as.numeric(continuous_rm[[13]]["no. treatments"])/2
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))),
lapply(1:length(bin_ranks), function(i) averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))))
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))),
lapply(1:length(bin_ranks), function(i) averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsSUCRA_AO)
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) ifelse(as.numeric(continuous_rm[[i]]["no. treatments"])>5,
averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2)),
NA)),
lapply(1:length(bin_ranks), function(i) ifelse(as.numeric(binary_rm[[i]]["no. treatments"])>5,
averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)),
NA)))
head(pBVvsSUCRA_AO)
averageoverlap(bin_ranks[[4]][,"pBV ranks"],bin_ranks[[4]][,"SUCRA_ranks"],floor(as.numeric(binary_rm[[4]]["no. treatments"])/2))
averageoverlap(con_ranks[[4]][,"pBV ranks"],con_ranks[[4]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[4]]["no. treatments"])/2))
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) ifelse(as.numeric(continuous_rm[[i]]["no. treatments"])>5,
as.vector(averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))),
NA)),
lapply(1:length(bin_ranks), function(i) ifelse(as.numeric(binary_rm[[i]]["no. treatments"])>5,
averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)),
NA)))
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) ifelse(as.numeric(binary_rm[[i]]["no. treatments"])>5,
averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2)),
NA)))
pBVvsSUCRA_AO[56]
pBVvsSUCRA_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsSUCRA_AO)
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(pBVvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_AP)
head(pBVvsAvgTE_AO)
SUCRAvsAvgTE_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
head(SUCRAvsAvgTE_AO)
SUCRAvsSUCRAjags_AO <- c(lapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
lapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
head(SUCRAvsSUCRAjags_AO)
length(SUCRAvsSUCRAjags_AO)
length(!is.na(SUCRAvsSUCRAjags_AO))
!is.na(SUCRAvsSUCRAjags_AO)
sum(!is.na(SUCRAvsSUCRAjags_AO))
sum(SUCRAvsSUCRAjags_AO>0.9)sum(!is.na(SUCRAvsSUCRAjags_AO))
sum(SUCRAvsSUCRAjags_AO>0.9)/sum(!is.na(SUCRAvsSUCRAjags_AO))
sum(SUCRAvsSUCRAjags_AO>0.9)
sum(SUCRAvsSUCRAjags_AO>0.9, na.rm = T)/sum(!is.na(SUCRAvsSUCRAjags_AO))
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
View(nmadb_used)
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
View(nmadb_used)
readByID(479622)
readByID(479816)
readByID(479622)
readByID(479993)
readByID(480039)
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
View(nmadb_used)
readByID(480655)
readByID(480695)
readByID(480851)
readByID(481200)
readByID(481378)
readByID(481384)
nmadb_used[80, "Record.ID"]
which(nmadb_used$Record.ID==481589)
which(nmadb_used$Record.ID==481734)
readByID(481734)
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
View(nmadb_used)
readByID(482006)
readByID(481942)
which(nmadb_used$Record.ID==482120)
readByID(482120)
readByID(482451)
which(nmadb_used$Record.ID==482477)
readByID(482630
)
which(nmadb_used$Record.ID==482630)
