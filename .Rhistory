DPs[DPs$studlab==18 & DPs$studlab==185,"seTE"] <- DPs$SDd/sqrt(DPs$n1)[DPs$studlab==18 & DPs$studlab==185]
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T)
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, details.chkmultiarm = T)
DPs$rho
DPs$SDd
DPs[DPs$studlab==18 & DPs$studlab==185,"seTE"]
DPs[DPs$studlab==18 & DPs$studlab==185,]$seTE
DPs$seTE
View(DPs)
# assign correlation value to study 18 and 185 based on other studies to fix issues with negative variances
DPs$rho <- 0.7
DPs$SDd <- sqrt(DPs$sd1^2 + DPs$sd2^2 - 2*DPs$rho*DPs$sd1*DPs$sd2)
DPs[DPs$studlab==18 & DPs$studlab==185,"seTE"] <- DPs$SDd/sqrt(DPs$n1)[DPs$studlab==18 & DPs$studlab==185]
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, details.chkmultiarm = T)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/Insomnia/MyrtoIncludedAllOutcomesClean27.6dVirgiRenamedInterventions.xlsx", na = "NA")
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "MD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#remove rows for studies disconnected from main network
DPs <- DATApairs[-grep("LAT|MAT|BBT I|midazolam|hygiene|juice",DATApairs$treat1),]
# remove studies with "special patients" that should not be included in main analysis
DPs <- DPs[DPs$Included==1,]
#check p-value availability for paired t-test for crossover studies with both phases used
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,c("studlab","tst_PorF-value","tst_p=0, f=1")]
# use threshold value for those with p-value <0.001
DPs[DPs$studlab==185, "tst_PorF-value"] <- 0.00099
#now calculate adjusted SE for remaining crossover studies
DPs$tvalue <- qt(as.numeric(DPs$`tst_PorF-value`)/2, df=DPs$n1-1, lower.tail = F)
#DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
#DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- (abs(DPs$TE)/DPs$tvalue)[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, details.chkmultiarm = T)
# assign correlation value to study 18 and 185 based on other studies to fix issues with negative variances
DPs$rho <- 0.9
DPs$seTE
DPs[DPs$studlab==18 & DPs$studlab==185,]$seTE
DPs[DPs$studlab==18 & DPs$studlab==185,"seTE"]
DPs$seTE[DPs$studlab==18 & DPs$studlab==185]
DPs[DPs$studlab==18 | DPs$studlab==185,]$seTE
# assign correlation value to study 18 and 185 based on other studies to fix issues with negative variances
DPs$rho <- 0.9
DPs$SDd <- sqrt(DPs$sd1^2 + DPs$sd2^2 - 2*DPs$rho*DPs$sd1*DPs$sd2)
DPs[DPs$studlab==18 | DPs$studlab==185,"seTE"] <- DPs$SDd/sqrt(DPs$n1)[DPs$studlab==18 | DPs$studlab==185]
DPs[DPs$studlab==18 | DPs$studlab==185,"seTE"]
DPs$SDd/sqrt(DPs$n1)[DPs$studlab==18 | DPs$studlab==185]
DPs[DPs$studlab==18 | DPs$studlab==185,"seTE"] <- DPs$SDd/sqrt(DPs$n1)
[DPs$studlab==18 | DPs$studlab==185]
DPs[DPs$studlab==18 | DPs$studlab==185,"seTE"] <- DPs$SDd/sqrt(DPs$n1)[DPs$studlab==18 | DPs$studlab==185],
DPs[DPs$studlab==18 | DPs$studlab==185,"seTE"] <- DPs$SDd/sqrt(DPs$n1)[DPs$studlab==18 | DPs$studlab==185,]
DPs[DPs$studlab==18 | DPs$studlab==185,"seTE"] <- (DPs$SDd/sqrt(DPs$n1))[DPs$studlab==18 | DPs$studlab==185]
DPs[DPs$studlab==18 | DPs$studlab==185,]$seTE
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, details.chkmultiarm = T)
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.5)
TST
TST$n
TST$k
#network plot
netgraph(TST, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1, number.of.studies=T)
#forest plots
forest(TST, ref="pbo", sortvar = -Pscore,xlab="MD")
cat(paste("tau=",round(TST$tau,3)))
cat(paste("I2=",round(TST$I2, digits = 2)*100,"%"))
#only non-crossover
InsoTSTsen=subset(DPs,Crossoverstudy==0 | Crossoverstudy==1 & `crossover, not first phase used`!=1)
View(DPs)
View(InsoTSTsen)
TSTsens<-netmeta(TE,seTE,treat1,treat2,studlab,data=InsoTSTsen,  sm="MD",comb.fixed =F, comb.random = T)
netconnection(treat1,treat2,studlab,data=InsoTSTsen,warn = T)
View(InsoTSTsen)
# not connected so remove study 161 (chlormethiazole vs temazepam)
InsoTSTsen <- subset(InsoTSTsen, treat1!="chlormethiazole")
TSTsens<-netmeta(TE,seTE,treat1,treat2,studlab,data=InsoTSTsen,  sm="MD",comb.fixed =F, comb.random = T)
TSTsens
#network plot
netgraph(TSTsens, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1, number.of.studies=T)
View(DPs)
forest(TSTsens, ref="pbo",sortvar = -Pscore, smlab="Only parallel studies", fontsize=10,xlab="MD")
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/Insomnia/MyrtoIncludedAllOutcomesClean27.6dVirgiRenamedInterventions.xlsx", na = "NA")
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/Insomnia/MyrtoIncludedAllOutcomesClean27.6dVirgiRenamedInterventions.xlsx", na = "NA")
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all)
DATApairs$comparison <- paste(DATApairs$treat1, "VS", DATApairs$treat2)
TSTma <- metagen(TE, seTE, studlab = Study_name, data = DATApairs, byvar = comparison, tau.common = T)
summary(TSTma)
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm="MD")
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#check p-value availability for paired t-test for crossover studies with both phases used
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,c("studlab","tst_PorF-value","tst_p=0, f=1")]
# use threshold value for those with p-value <0.001
DATApairs[DATApairs$studlab==185, "tst_PorF-value"] <- 0.00099
#now calculate adjusted SE for remaining crossover studies
DATApairs$tvalue <- qt(as.numeric(DATApairs$`tst_PorF-value`)/2, df=DATApairs$n1-1, lower.tail = F)
#DATApairs$SDd <- abs((DATApairs$mean2-DATApairs$mean1)/DATApairs$tvalue*sqrt(DATApairs$n1))
#DATApairs$rho <- (DATApairs$sd1^2 + DATApairs$sd2^2 - DATApairs$SDd^2)/(2*DATApairs$sd1*DATApairs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- (abs(DPs$TE)/DPs$tvalue)[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
DATApairs$comparison <- paste(DATApairs$treat1, "VS", DATApairs$treat2)
TSTma <- metagen(TE, seTE, studlab = Study_name, data = DATApairs, byvar = comparison, tau.common = T)
summary(TSTma)
View(DATApairs)
knitr::opts_chunk$set(echo = TRUE)
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/Insomnia/MyrtoIncludedAllOutcomesClean27.6dVirgiRenamedInterventions.xlsx", na = "NA")
TSTma <- metagen(TE, seTE, studlab = Study_name, data = DATApairs, sm="MD", byvar = comparison, tau.common = T)
summary(TSTma)
knitr::opts_chunk$set(echo = TRUE, fig.width = 8, fig.height = 3)
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/Insomnia/MyrtoIncludedAllOutcomesClean27.6dVirgiRenamedInterventions.xlsx", na = "NA")
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepQualityScaleMean,sd=SleepQualityScaleSD,n=SleepQualityScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#check p-value availability for paired t-test for crossover studies with both phases used
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,c("studlab","squal_PorF-value","squal_p=0, f=1")]
# use threshold value for those with p-value <0.025
DATApairs[DATApairs$studlab==17, "squal_PorF-value"] <- 0.02499
# now calculate adjusted SE for remaining crossover studies
DATApairs$tvalue <- qt(as.numeric(DATApairs$`squal_PorF-value`)/2, df=DATApairs$n1-1, lower.tail = F)
DATApairs$SDd <- abs((DATApairs$mean2-DATApairs$mean1)/DATApairs$tvalue*sqrt(DATApairs$n1))
DATApairs$rho <- (DATApairs$sd1^2 + DATApairs$sd2^2 - DATApairs$SDd^2)/(2*DATApairs$sd1*DATApairs$sd2)
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DATApairs$n1+(DATApairs$TE^2)/(2*DATApairs$n1))*(2-2*DATApairs$rho))[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1]
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepQualityScaleMean,sd=SleepQualityScaleSD,n=SleepQualityScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#check p-value availability for paired t-test for crossover studies with both phases used
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,c("studlab","squal_PorF-value","squal_p=0, f=1")]
# use threshold value for those with p-value <0.025
DATApairs[DATApairs$studlab==17, "squal_PorF-value"] <- 0.02499
# now calculate adjusted SE for remaining crossover studies
DATApairs$tvalue <- qt(as.numeric(DATApairs$`squal_PorF-value`)/2, df=DATApairs$n1-1, lower.tail = F)
DATApairs$SDd <- abs((DATApairs$mean2-DATApairs$mean1)/DATApairs$tvalue*sqrt(DATApairs$n1))
DATApairs$rho <- (DATApairs$sd1^2 + DATApairs$sd2^2 - DATApairs$SDd^2)/(2*DATApairs$sd1*DATApairs$sd2)
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DATApairs$n1+(DATApairs$TE^2)/(2*DATApairs$n1))*(2-2*DATApairs$rho))[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1]
# create variable to indicate comparison so can do all pairwise MAs as subgroup analysis with a single command
DATApairs$comparison <- paste(DATApairs$treat1, "VS", DATApairs$treat2)
SQma <- metagen(TE, seTE, studlab = Study_name, data = DATApairs, sm="SMD",byvar = comparison, tau.common = T)
View(DATApairs)
# remove studies for which no p-value available
DPs <- DPs[DPs$studlab!=94 & DPs$studlab!=21,]
View(DATApairs)
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepQualityScaleMean,sd=SleepQualityScaleSD,n=SleepQualityScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#check p-value availability for paired t-test for crossover studies with both phases used
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,c("studlab","squal_PorF-value","squal_p=0, f=1")]
# use threshold value for those with p-value <0.025
DATApairs[DATApairs$studlab==17, "squal_PorF-value"] <- 0.02499
# remove studies for which no p-value available
DATApairs <- DATApairs[DATApairs$studlab!=94 & DATApairs$studlab!=21,]
# now calculate adjusted SE for remaining crossover studies
DATApairs$tvalue <- qt(as.numeric(DATApairs$`squal_PorF-value`)/2, df=DATApairs$n1-1, lower.tail = F)
DATApairs$SDd <- abs((DATApairs$mean2-DATApairs$mean1)/DATApairs$tvalue*sqrt(DATApairs$n1))
DATApairs$rho <- (DATApairs$sd1^2 + DATApairs$sd2^2 - DATApairs$SDd^2)/(2*DATApairs$sd1*DATApairs$sd2)
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DATApairs$n1+(DATApairs$TE^2)/(2*DATApairs$n1))*(2-2*DATApairs$rho))[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1]
# create variable to indicate comparison so can do all pairwise MAs as subgroup analysis with a single command
DATApairs$comparison <- paste(DATApairs$treat1, "VS", DATApairs$treat2)
SQma <- metagen(TE, seTE, studlab = Study_name, data = DATApairs, sm="SMD",byvar = comparison, tau.common = T)
View(DATApairs)
DATApairs[DATApairs$TE=NA | DATApairs$seTE==NA,c("studlab","TE","seTE")]
DATApairs[DATApairs$TE=NA | DATApairs$seTE=NA,c("studlab","TE","seTE")]
DATApairs[DATApairs$TE==NA | DATApairs$seTE==NA,c("studlab","TE","seTE")]
DATApairs[DATApairs$TE=="NA" | DATApairs$seTE=="NA",c("studlab","TE","seTE")]
View(DATApairs)
DATApairs[DATApairs$TE==NA,c("studlab","TE","seTE")]
DATApairs[DATApairs$TE==NA,"studlab"]
DATApairs[DATApairs$TE=="NA","studlab"]
DATApairs[DATApairs$TE=="NA",]$studlab
DATApairs[DATApairs$TE==NA,]$studlab
DATApairs[DATApairs$seTE==NA,]$studlab
DATApairs[DATApairs$seTE=="NA",]$studlab
DATApairs[,c("studlab","TE","seTE")]
is.na(DATApairs$TE)
DATApairs[is.na(DATApairs$TE),c("studlab","TE","seTE")]
DATApairs[is.na(DATApairs$TE),c("studlab","treat1","treat2","TE","seTE")]
DATApairs[is.na(DATApairs$TE) | is.na(DATApairs$seTE),c("studlab","treat1","treat2","TE","seTE")]
DATApairs <- subset(DATApairs, treat2!="sleep hygiene")
#check p-value availability for paired t-test for crossover studies with both phases used
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,c("studlab","squal_PorF-value","squal_p=0, f=1")]
# use threshold value for those with p-value <0.025
DATApairs[DATApairs$studlab==17, "squal_PorF-value"] <- 0.02499
# remove studies for which no p-value available
DATApairs <- DATApairs[DATApairs$studlab!=94 & DATApairs$studlab!=21,]
# now calculate adjusted SE for remaining crossover studies
DATApairs$tvalue <- qt(as.numeric(DATApairs$`squal_PorF-value`)/2, df=DATApairs$n1-1, lower.tail = F)
DATApairs$SDd <- abs((DATApairs$mean2-DATApairs$mean1)/DATApairs$tvalue*sqrt(DATApairs$n1))
DATApairs$rho <- (DATApairs$sd1^2 + DATApairs$sd2^2 - DATApairs$SDd^2)/(2*DATApairs$sd1*DATApairs$sd2)
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DATApairs$n1+(DATApairs$TE^2)/(2*DATApairs$n1))*(2-2*DATApairs$rho))[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1]
# create variable to indicate comparison so can do all pairwise MAs as subgroup analysis with a single command
DATApairs$comparison <- paste(DATApairs$treat1, "VS", DATApairs$treat2)
SQma <- metagen(TE, seTE, studlab = Study_name, data = DATApairs, sm="SMD",byvar = comparison, tau.common = T)
View(DATApairs)
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepQualityScaleMean,sd=SleepQualityScaleSD,n=SleepQualityScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepQualityScaleMean,sd=SleepQualityScaleSD,n=SleepQualityScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
DATApairs[is.na(DATApairs$TE) | is.na(DATApairs$seTE),c("studlab","treat1","treat2","TE","seTE")]
DATApairs <- subset(DATApairs, studlab!=183 & studlab!=13 )
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,c("studlab","squal_PorF-value","squal_p=0, f=1")]
# use threshold value for those with p-value <0.025
DATApairs[DATApairs$studlab==17, "squal_PorF-value"] <- 0.02499
# remove studies for which no p-value available
DATApairs <- DATApairs[DATApairs$studlab!=94 & DATApairs$studlab!=21,]
# now calculate adjusted SE for remaining crossover studies
DATApairs$tvalue <- qt(as.numeric(DATApairs$`squal_PorF-value`)/2, df=DATApairs$n1-1, lower.tail = F)
DATApairs$SDd <- abs((DATApairs$mean2-DATApairs$mean1)/DATApairs$tvalue*sqrt(DATApairs$n1))
DATApairs$rho <- (DATApairs$sd1^2 + DATApairs$sd2^2 - DATApairs$SDd^2)/(2*DATApairs$sd1*DATApairs$sd2)
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DATApairs$n1+(DATApairs$TE^2)/(2*DATApairs$n1))*(2-2*DATApairs$rho))[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1]
# create variable to indicate comparison so can do all pairwise MAs as subgroup analysis with a single command
DATApairs$comparison <- paste(DATApairs$treat1, "VS", DATApairs$treat2)
SQma <- metagen(TE, seTE, studlab = Study_name, data = DATApairs, sm="SMD",byvar = comparison, tau.common = T)
summary(SQma)
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
View(nmadb_used)
read.bugsdata(482451)
readByID(482451)
View(readByID(482451))
readByID(482451)[["data"]]
readByID(50127)
readByID(501272)
nmadb_used[Record.ID==482451]$Harmful.Beneficial.Outcome
nmadb_used[nmadb_used$Record.ID==482451]$Harmful.Beneficial.Outcome
nmadb_used[nmadb_used$Record.ID==482451,]$Harmful.Beneficial.Outcome
nmadb_used[nmadb_used$Record.ID==501272,]$Harmful.Beneficial.Outcome
readByID(501332)[["data"]]
options(max.print = 5000)
readByID(501332)[["data"]]
nmadb_used[nmadb_used$Record.ID==501332,]$Harmful.Beneficial.Outcome
readByID(501334)[["data"]]
nmadb_used[nmadb_used$Record.ID==501334,]$Harmful.Beneficial.Outcome
nmadb_used[nmadb_used$Record.ID==501332,]$Harmful.Beneficial.Outcome
nmadb_used[nmadb_used$Record.ID==501370,]$Harmful.Beneficial.Outcome
nmadb_used[nmadb_used$Record.ID==501371,]$Harmful.Beneficial.Outcome
nmadb_used[nmadb_used$Record.ID==501371,]$Primary.Outcome
nmadb_used[nmadb_used$Record.ID==501370,]$Primary.Outcome
readByID(501370)[["data"]]
readByID(501371)[["data"]]
rm(list=ls())
library(devtools)
library(nmadata)
library(readxl)
install_github("esm-ispm-unibe-ch/NMAJags")
install_github("esm-ispm-unibe-ch/rankingagreement")
library(rankingagreement)
library(NMAJags)
library(R2jags)
library(netmeta)
library(ircor)
nmadb = getNMADB()
# nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
# get IDs of networks separately for binary and continuous outcome; those with inverse-variance excluded
binaryIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Binary" & nmadb$Format!="iv",]$Record.ID
continuousIDs = nmadb[nmadb$Verified=="True" & nmadb$Type.of.Outcome.=="Continuous" & nmadb$Format!="iv",]$Record.ID
# calculate ranking metrics for continuous outcome networks
continuous_rm = lapply(continuousIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_con_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_con(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec range"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},  error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(continuous_rm) <- as.character(continuousIDs)
head(continuous_rm)
# calculate ranking metrics for binary outcome networks
binary_rm = lapply(binaryIDs,
function(rid) {
tryCatch({
nma = runnetmeta(rid)
netd = readByID(rid)
if (nmadb[nmadb$Record.ID==rid,]$Harmful.Beneficial.Outcome=="Beneficial"){
nmaranks = netmetaranks_B(nma,1000)
altnma = alternativenma(nma, small.values = "bad")
jagsranks = nmajagsranks_bin_B(netd$data)
}
else {
nmaranks = netmetaranks_H(nma,1000)
altnma = alternativenma(nma)
jagsranks = nmajagsranks_bin(netd$data)
}
return(list("no. treatments"=nma$n, "no. studies"=nma$k,"sample size"=sum(netd$data$n),
"ranking metrics"=cbind(nmaranks,jagsranks, "Avg TE"=altnma$averages$TE, "Avg TE ranks"=altnma$averages$TE_ranks, "Avg Pscore"=altnma$averages$Pscoreaverage),
"Avg TE prec range"=(max(altnma$averages$seTE^2)-min(altnma$averages$seTE^2))/max(altnma$averages$seTE^2),
"Avg TE prec avg"=mean(altnma$averages$seTE^2)))
},   error=function(cond){
message(cond)
return(list(recid=rid,error=cond))
}
)
}
)
names(binary_rm) <- as.character(binaryIDs)
head(binary_rm)
# create lists with only ranks for kendall correlation
con_ranks <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(continuous_rm[[i]][["ranking metrics"]]))])
names(con_ranks) <- as.character(continuousIDs)
head(con_ranks)
bin_ranks <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,grepl("rank",colnames(binary_rm[[i]][["ranking metrics"]]))])
names(bin_ranks) <- as.character(binaryIDs)
head(bin_ranks)
# create lists with only ranking metrics values for spearman correlation
# con_values <- lapply(1:length(continuous_rm), function(i) continuous_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
# bin_values <- lapply(1:length(binary_rm), function(i) binary_rm[[i]][["ranking metrics"]][,c(1,3,5,7,8,9,11,13)])
# calculate kendall correlation
kendall_con <- lapply(con_ranks, cor, method="kendall")
names(kendall_con) <- as.character(continuousIDs)
head(kendall_con)
kendall_bin <- lapply(bin_ranks, cor, method="kendall")
names(kendall_bin) <- as.character(binaryIDs)
head(kendall_bin)
# calculate spearman correlation
spearman_con <- lapply(con_ranks, cor, method="spearman")
names(spearman_con) <- as.character(continuousIDs)
head(spearman_con)
spearman_bin <- lapply(bin_ranks, cor, method="spearman")
names(spearman_bin) <- as.character(binaryIDs)
head(spearman_bin)
# save all pBV vs SUCRA in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsSUCRA_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","SUCRA_ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","SUCRA_ranks"]))
names(pBVvsSUCRA_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"SUCRA_ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"SUCRA_ranks"], decreasing=F)))
names(pBVvsSUCRA_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"SUCRA_ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- Filter(Negate(anyNA), pBVvsSUCRA_AO)   ## exclude any NAs
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
res_pBVvsSUCRA_s <- paste0(summary(pBVvsSUCRA_s, digits = 3)["Median"], " (", summary(pBVvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_k <-paste0(summary(pBVvsSUCRA_k, digits = 3)["Median"], " (", summary(pBVvsSUCRA_k, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_AP <-paste0(summary(pBVvsSUCRA_AP, digits = 3)["Median"], " (", summary(pBVvsSUCRA_AP, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AP, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_AO <-paste0(summary(pBVvsSUCRA_AO, digits = 3)["Median"], " (", summary(pBVvsSUCRA_AO, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AO, digits = 3)["3rd Qu."], ")")
# save all pBV vs Avg TE in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(pBVvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- Filter(Negate(anyNA), pBVvsAvgTE_AO)   ## exclude any NAs
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_AP)
head(pBVvsAvgTE_AO)
res_pBVvsAvgTE_s <- paste0(summary(pBVvsAvgTE_s, digits = 3)["Median"], " (", summary(pBVvsAvgTE_s, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_s, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_k <-paste0(summary(pBVvsAvgTE_k, digits = 3)["Median"], " (", summary(pBVvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_AP <-paste0(summary(pBVvsAvgTE_AP, digits = 3)["Median"], " (", summary(pBVvsAvgTE_AP, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_AP, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_AO <-paste0(summary(pBVvsAvgTE_AO, digits = 3)["Median"], " (", summary(pBVvsAvgTE_AO, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_AO, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs Avg TE in a vector separately for kendall, spearman and AP, then store median and interquartile range
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(SUCRAvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- Filter(Negate(anyNA), SUCRAvsAvgTE_AO)   ## exclude any NAs
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
head(SUCRAvsAvgTE_AP)
head(SUCRAvsAvgTE_AO)
res_SUCRAvsAvgTE_s <- paste0(summary(SUCRAvsAvgTE_s, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_s, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_k <- paste0(summary(SUCRAvsAvgTE_k, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_AP <- paste0(summary(SUCRAvsAvgTE_AP, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_AP, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AP, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_AO <-paste0(summary(SUCRAvsAvgTE_AO, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_AO, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AO, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs SUCRA jags in a vector separately for kendall and spearman, then store median and interquartile range
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)))
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsSUCRAjags_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- Filter(Negate(anyNA), SUCRAvsSUCRAjags_AO)   ## exclude any NAs
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
sum(SUCRAvsSUCRAjags_AO>0.9)/length(SUCRAvsSUCRAjags_AO)# % of networks with AO >0.9
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
# store relative range of precision for Avg TE in each network in a vector
AvgTEprec_range <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec range"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec range"]))
# store average precision for Avg TE in each network in a vector
AvgTEprec_avg <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec avg"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec avg"]))
names(AvgTEprec_range) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_range)
names(AvgTEprec_avg) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_avg)
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source("plots.R")
